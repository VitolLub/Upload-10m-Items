var GetUWLItemChromeDriver;
(function (GetUWLItemChromeDriver) {
    GetUWLItemChromeDriver.ExtensionNamespace = typeof browser != 'undefined' ? browser : chrome;
    GetUWLItemChromeDriver.library = new GetUWLItemLibrary.GetUWLItem(document);
    function getTime() {
        return (window.performance) ? window.performance.now() : Date.now();
    }
    GetUWLItemChromeDriver.getTime = getTime;
    function createNewResponse(messageId) {
        return {
            msgId: messageId,
            error: undefined,
            payload: undefined,
            performanceTiming: {
                requestStart: undefined,
                requestEnd: undefined
            }
        };
    }
    function handleMessage(request, sender, sendResponse) {
        if (request && this.library.canHandle(request.type)) {
            var response = createNewResponse(request.msgId);
            try {
                response.performanceTiming.requestStart = this.getTime();
                response.payload = this.library.handle(request.payload);
                response.performanceTiming.requestEnd = this.getTime();
            }
            catch (e) {
                response.error = (e && typeof e.toString === "function") ? e.toString() : "Error object in GetUWLItemChromeDriver is undefined or has no toString method";
            }
            finally {
                sendResponse(response);
            }
        }
    }
    GetUWLItemChromeDriver.handleMessage = handleMessage;
    function bootstrap() {
        if (!this.initialized) {
            this.initialized = true;
            GetUWLItemChromeDriver.ExtensionNamespace.runtime.onMessage.addListener(this.handleMessage.bind(this));
        }
    }
    GetUWLItemChromeDriver.bootstrap = bootstrap;
    GetUWLItemChromeDriver.bootstrap.call(GetUWLItemChromeDriver);
})(GetUWLItemChromeDriver || (GetUWLItemChromeDriver = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0VVdMSXRlbURyaXZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy91YnAvZXh0ZW5zaW9uL2NvbnRleHR1YWwvcGVlci1zY3JpcHRzL2RyaXZlcnMvY2hyb21lL0dldFVXTEl0ZW1Ecml2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0EsSUFBVSxzQkFBc0IsQ0FzSC9CO0FBdEhELFdBQVUsc0JBQXNCO0lBU2pCLHlDQUFrQixHQUFRLE9BQU8sT0FBTyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFpQjNFLDhCQUFPLEdBQTBCLElBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBV3ZGLFNBQWdCLE9BQU87UUFDbkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFGZSw4QkFBTyxVQUV0QixDQUFBO0lBWUQsU0FBUyxpQkFBaUIsQ0FBQyxTQUFnQjtRQUN2QyxPQUFPO1lBQ0gsS0FBSyxFQUFRLFNBQVM7WUFDdEIsS0FBSyxFQUFRLFNBQVM7WUFDdEIsT0FBTyxFQUFNLFNBQVM7WUFDdEIsaUJBQWlCLEVBQUU7Z0JBQ2YsWUFBWSxFQUFFLFNBQVM7Z0JBQ3ZCLFVBQVUsRUFBSSxTQUFTO2FBQzFCO1NBQ0osQ0FBQztJQUNOLENBQUM7SUFlRCxTQUFnQixhQUFhLENBQUMsT0FBOEIsRUFDOUIsTUFBbUMsRUFDbkMsWUFBdUQ7UUFDakYsSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBRWpELElBQUksUUFBUSxHQUEyQixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFeEUsSUFBSTtnQkFDQSxRQUFRLENBQUMsaUJBQWlCLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFFekQsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBRXhELFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQzFEO1lBQ0QsT0FBTSxDQUFDLEVBQUU7Z0JBR0wsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsK0VBQStFLENBQUM7YUFDNUo7b0JBQ087Z0JBQ0osWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzFCO1NBQ0o7SUFDTCxDQUFDO0lBdkJlLG9DQUFhLGdCQXVCNUIsQ0FBQTtJQVFELFNBQWdCLFNBQVM7UUFFckIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFFeEIsdUJBQUEsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNuRjtJQUNMLENBQUM7SUFQZSxnQ0FBUyxZQU94QixDQUFBO0lBR0Qsc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsRUF0SFMsc0JBQXNCLEtBQXRCLHNCQUFzQixRQXNIL0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgYm9vdHN0cmFwcyB7QGxpbmsgR2V0VVdMSXRlbUxpYnJhcnl9IHVuZGVyIENocm9tZSdzIGNvbnRlbnQgc2NyaXB0XG4gKiBlbnZpcm9ubWVudCBvbmx5IE9OQ0U6IFRvIGF2b2lkIGR1cGxpY2F0ZSBsaXN0ZW5lcnMgb24gY2hyb21lIHJ1bnRpbWVcbiAqIG1lc3NhZ2VzLCB7QGxpbmsgR2V0VVdMSXRlbUNocm9tZURyaXZlciNib290c3RyYXB9IHdpbGwgb25seSByZWdpc3RlciB0aGUgbGlzdGVuZXIgb25jZVxuICogd2l0aGluIHRoZSBjb250ZW50IHNjcmlwdCBKUkUgbGlmZXRpbWUgYnkgaWdub3JpbmcgYWxsIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBIb3dldmVyLCB7QGxpbmsgR2V0VVdMSXRlbUxpYnJhcnl9IHdpbGwgYmUgcmVuZXdlZCBpZiBpbmplY3RlZCBhZ2FpblxuICogdG8gZW5zdXJlIHRoZSBsaWJyYXJ5IGlzIHVwIHRvIGRhdGUgaW4gY2FzZSBvZiBleHRlbnNpb24gdXBkYXRlcy9yZXN0YXJ0cy5cbiAqXG4gKiBYWFg6IHBlZXIgc2NyaXB0cyBjYW5ub3QgdXNlIHRoZSBtb2R1bGUgbG9hZGVyIGFzIHRoZXkgYXJlIHRvIGJlIGluamVjdGVkXG4gKiBvbnRvIHRoZSBwYWdlIGRpcmVjdGx5IGFuZCB0aHVzIG5lZWQgdG8gbGlnaHQtd2VpZ2h0LlxuICovXG5uYW1lc3BhY2UgR2V0VVdMSXRlbUNocm9tZURyaXZlciB7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJ1bnRpbWUgZXh0ZW5zaW9uIG5hbWVzcGFjZSwgd2hpY2ggaXMgdGhlIGV4dGVuc2lvbiBBcGkgbmFtZXNwYWNlXG4gICAgICogZm9yIGNocm9tZSwgaXQgaXMgY2hyb21lXG4gICAgICogZm9yIGVkZ2UsIGl0IGlzIGVkZ2VcbiAgICAgKiBJdCB3aWxsIGJlIGlkZWFsIHdlIGNhbiBnZXQgdGhpcyBmcm9tIFJ1bnRpbW1lXG4gICAgICogQHR5cGUge2Jyb3dzZXJ8Y2hyb21lfVxuICAgICAqL1xuICAgIGV4cG9ydCB2YXIgRXh0ZW5zaW9uTmFtZXNwYWNlOiBhbnkgPSB0eXBlb2YgYnJvd3NlciAhPSAndW5kZWZpbmVkJyA/IGJyb3dzZXIgOiBjaHJvbWU7XG5cbiAgICAvKipcbiAgICAgKiBHbG9iYWwgRmxhZyB0byBlbnN1cmUgYm9vdHN0cmFwcGluZyBvbmx5IGhhcHBlbnMgb25jZS5cbiAgICAgKlxuICAgICAqIFhYWDogVHlwZXNjcmlwdCBjb21waWxlciB0cmFuc2xhdGVzIHRoaXMgbGluZSBpbnRvXG4gICAgICogXCJHZXRVV0xJdGVtQ2hyb21lRHJpdmVyLmluaXRpYWxpemVkO1wiLCB3aGljaCBoYXMgbm8gZWZmZWN0XG4gICAgICogdG8gaXRzIHN0YXRlIHdoZXRoZXIgaWYgaXQgZXhpc3RzIGFscmVhZHlcbiAgICAgKi9cbiAgICBleHBvcnQgdmFyIGluaXRpYWxpemVkOmJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBEZWxlZ2F0ZSB0byB0aGUgYnJvd3Nlci1hZ25vc3RpYyBjb250ZXh0dWFsIHBlZXIgbGlicmFyeSBmb3IgZ2V0IHdpc2hsaXN0IGl0ZW0uXG4gICAgICogTm90ZTogR2V0VVdMSXRlbUNocm9tZURyaXZlciBpcyBhIGdsb2JhbCBuYW1lc3BhY2UgYW5kIHRoaXMgd2lsbCByZXBsYWNlIGl0c1xuICAgICAqIHJlZmVyZW5jZSBldmVyeSB0aW1lIHRoZSBkcml2ZXIgc2NyaXB0IGlzIGluamVjdGVkXG4gICAgICogQHR5cGUge0dldFVXTEl0ZW1MaWJyYXJ5LkdldFVXTEl0ZW19XG4gICAgICovXG4gICAgZXhwb3J0IHZhciBsaWJyYXJ5OklDb250ZXh0dWFsUGVlckxpYnJhcnkgPSBuZXcgR2V0VVdMSXRlbUxpYnJhcnkuR2V0VVdMSXRlbShkb2N1bWVudCk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gY3VycmVudCB0aW1lIHN0YW1wIGZvciBwcm9maWxpbmdcbiAgICAgKlxuICAgICAqIHBlcmZvcm1hbmNlLm5vdygpIHJldHVybnMgYSBoaWdoIHJlc29sdXRpb24gdGltZSBzdGFtcCBpbiBtaWxsaW9uXG4gICAgICogc2Vjb25kcy4gVW5saWtlIERhdGUubm93KCksIGl0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludCBudW1iZXIgd2l0aCB1cFxuICAgICAqIHRvIG1pY3Jvc2Vjb25kIHByZWNpc2lvbi5cbiAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUGVyZm9ybWFuY2Uubm93XG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0VGltZSgpIHtcbiAgICAgICAgcmV0dXJuICh3aW5kb3cucGVyZm9ybWFuY2UpID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogRGF0ZS5ub3coKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBhbmQgcmV0dXJuIGFuIGVtcHR5IHtAbGluayBJQ29udGV4dHVhbFBlZXJSZXNwb25zZX0gb2JqZWN0XG4gICAgICpcbiAgICAgKiBOb3RlOiBwZXJmb3JtYW5jZVRpbWluZyBpcyBhIHBsYWNlIGhvbGRlciBmb3Igc3RvcmluZyBwcm9maWxpbmdcbiAgICAgKiBkYXRhIG9mIHRoZSBleGVjdXRpb24gKGVhY2ggc3RhcnQvZW5kIHBhaXIgcmVjb3JkcyB0aGUgdGltZSBzdGFtcHNcbiAgICAgKiBiZWZvcmUvYWZ0ZXIgcmVxdWVzdCBleGVjdXRpb24pXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUlkXG4gICAgICogQHJldHVybnMge3ttc2dJZDogc3RyaW5nLCBlcnJvcjogdW5kZWZpbmVkLCBwYXlsb2FkOiB1bmRlZmluZWQsIHBlcmZvcm1hbmNlVGltaW5nOiB7cmVxdWVzdFN0YXJ0OiB1bmRlZmluZWQsIHJlcXVlc3RFbmQ6IHVuZGVmaW5lZH19fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU5ld1Jlc3BvbnNlKG1lc3NhZ2VJZDpzdHJpbmcpOklDb250ZXh0dWFsUGVlclJlc3BvbnNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1zZ0lkICAgICAgOiBtZXNzYWdlSWQsXG4gICAgICAgICAgICBlcnJvciAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcGF5bG9hZCAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlVGltaW5nOiB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdFN0YXJ0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcmVxdWVzdEVuZCAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiByZWNlaXZlZCBhIHJ1bnRpbWUgbWVzc2FnZSBmcm9tIHRoZSBleHRlbnNpb24uXG4gICAgICogRmlyc3QgY2hlY2sgaWYgdGhlIGxpYnJhcnkgY2FuIGhhbmRsZSB0aGUgbWVzc2FnZS9yZXF1ZXN0IGFuZCBvbmx5IGZvcndhcmRcbiAgICAgKiBpdCB0byB0aGUgbGlicmFyeSBpZiB5ZXMuIEl0IGxvZ3MgdGhlIHRpbWUgdG9vayBmb3IgdGhlIGxpYnJhcnkgdG9cbiAgICAgKiBleGVjdXRlIHRoZSByZXF1ZXN0IGFuZCBvbmNlIGl0IGlzIGRvbmUsIHNlbmQgdGhlIHJlc3VsdCBiYWNrXG4gICAgICogdG8gdGhlIGV4dGVuc2lvbiBieSBleGVjdXRpbmcgdGhlIGNhbGxiYWNrIHByb3ZpZGVkIGJ5IHJ1bnRpbWVcbiAgICAgKlxuICAgICAqIE5vdGU6IFwidGhpc1wiIGlzIHN1cHBvc2UgdG8gYmluZCB0byB0aGUgbW9kdWxlIG5hbWVzcGFjZVxuICAgICAqXG4gICAgICogQHBhcmFtIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0gc2VuZGVyXG4gICAgICogQHBhcmFtIHNlbmRSZXNwb25zZVxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKHJlcXVlc3Q6SUNvbnRleHR1YWxQZWVyUmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXI6Y2hyb21lLnJ1bnRpbWUuTWVzc2FnZVNlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2U6KHJlc3BvbnNlOklDb250ZXh0dWFsUGVlclJlc3BvbnNlKSA9PiB2b2lkKTp2b2lkIHtcbiAgICAgICAgaWYgKHJlcXVlc3QgJiYgdGhpcy5saWJyYXJ5LmNhbkhhbmRsZShyZXF1ZXN0LnR5cGUpKSB7XG5cbiAgICAgICAgICAgIHZhciByZXNwb25zZTpJQ29udGV4dHVhbFBlZXJSZXNwb25zZSA9IGNyZWF0ZU5ld1Jlc3BvbnNlKHJlcXVlc3QubXNnSWQpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnBlcmZvcm1hbmNlVGltaW5nLnJlcXVlc3RTdGFydCA9IHRoaXMuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucGF5bG9hZCA9IHRoaXMubGlicmFyeS5oYW5kbGUocmVxdWVzdC5wYXlsb2FkKTtcblxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnBlcmZvcm1hbmNlVGltaW5nLnJlcXVlc3RFbmQgPSB0aGlzLmdldFRpbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBQYXNzaW5nIHdob2xlIGVycm9yIG9iamVjdCB0byBleHRlbnNpb24gcmVzdWx0cyBpbiBlbXB0eSBvYmplY3QgaW4gdGhlIGV4dGVuc2lvbi5cbiAgICAgICAgICAgICAgICAvLyBTbyBvbmx5IHBhc3MgdGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3IgPSAoZSAmJiB0eXBlb2YgZS50b1N0cmluZyA9PT0gXCJmdW5jdGlvblwiKT8gZS50b1N0cmluZygpIDogXCJFcnJvciBvYmplY3QgaW4gR2V0VVdMSXRlbUNocm9tZURyaXZlciBpcyB1bmRlZmluZWQgb3IgaGFzIG5vIHRvU3RyaW5nIG1ldGhvZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJvb3RzdHJhcHMgdGhlIGNvbnRleHR1YWwgcGVlciBsaWJyYXJ5IHRvIHRoZSBjb250ZXh0IHNjcmlwdCBydW50aW1lXG4gICAgICpcbiAgICAgKiBOb3RlOiBcInRoaXNcIiBpcyBzdXBwb3NlIHRvIGJpbmQgdG8gdGhlIG1vZHVsZSBuYW1lc3BhY2VcbiAgICAgKlxuICAgICAqICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGJvb3RzdHJhcCgpIHtcbiAgICAgICAgLy8gQWxsb3cgYm9vdHN0cmFwIHRvIGhhcHBlbiBvbmx5IG9uY2UgcGVyIEpSRVxuICAgICAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBFeHRlbnNpb25OYW1lc3BhY2UucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIodGhpcy5oYW5kbGVNZXNzYWdlLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIGNhbGwgZXZlcnkgdGltZSB0aGUgZHJpdmVyIGlzIGluamVjdGVkIGJ1dCBvbmx5IHRoZSBmaXJzdCB3aWxsIHN1Y2NlZWRcbiAgICBHZXRVV0xJdGVtQ2hyb21lRHJpdmVyLmJvb3RzdHJhcC5jYWxsKEdldFVXTEl0ZW1DaHJvbWVEcml2ZXIpO1xufVxuIl19
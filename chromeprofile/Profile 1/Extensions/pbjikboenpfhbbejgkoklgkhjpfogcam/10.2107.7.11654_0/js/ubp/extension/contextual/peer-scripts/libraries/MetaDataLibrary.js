var MetaDataLibrary;
(function (MetaDataLibrary) {
    var MetaData = (function () {
        function MetaData(_window) {
            this._window = _window;
            this._apiMap = {
                "UBPMetaDataGetPageReferrer": this.getPageReferrer.bind(this),
                "UBPMetaDataGetPageLocationData": this.getPageLocationData.bind(this),
                "UBPMetaDataGetPagePerformanceTimingData": this.getPagePerformanceTimingData.bind(this),
                "UBPMetaDataGetPageDimensionData": this.getPageDimensionData.bind(this)
            };
        }
        MetaData.prototype.canHandle = function (requestType) {
            return (typeof this._apiMap[requestType]) === "function";
        };
        MetaData.prototype.handle = function (requestType, payload) {
            if (!this.canHandle(requestType)) {
                throw new Error("MetaDataLibrary: Cannot handle " + requestType + ".");
            }
            return this._apiMap[requestType](payload);
        };
        MetaData.prototype.getPageReferrer = function () {
            return this._window && this._window.document && this._window.document.referrer || "";
        };
        MetaData.prototype.getPageLocationData = function () {
            return this._window && this._window.location && {
                url: this._window.location.href,
                hostname: this._window.location.hostname,
                path: this._window.location.pathname,
                protocol: this._window.location.protocol
            } || {};
        };
        MetaData.prototype.getPagePerformanceTimingData = function () {
            return this._window && this._window.performance && this._window.performance.timing &&
                (this._window.performance.timing.toJSON() || JSON.parse(JSON.stringify(new Object(this._window.performance.timing)))) || {};
        };
        MetaData.prototype.getPageDimensionData = function () {
            return this._window && {
                outerHeight: this._window.outerHeight,
                outerWidth: this._window.outerWidth,
                innerHeight: this._window.innerHeight,
                innerWidth: this._window.innerWidth
            } || {};
        };
        return MetaData;
    }());
    MetaDataLibrary.MetaData = MetaData;
})(MetaDataLibrary || (MetaDataLibrary = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YURhdGFMaWJyYXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3VicC9leHRlbnNpb24vY29udGV4dHVhbC9wZWVyLXNjcmlwdHMvbGlicmFyaWVzL01ldGFEYXRhTGlicmFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQSxJQUFVLGVBQWUsQ0FpRXhCO0FBakVELFdBQVUsZUFBZTtJQUVyQjtRQU1JLGtCQUFvQixPQUFlO1lBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtZQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHO2dCQUNYLDRCQUE0QixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDN0QsZ0NBQWdDLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ3JFLHlDQUF5QyxFQUFFLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUN2RixpQ0FBaUMsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUMxRSxDQUFDO1FBQ04sQ0FBQztRQUVELDRCQUFTLEdBQVQsVUFBVSxXQUFtQjtZQUN6QixPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssVUFBVSxDQUFDO1FBQzdELENBQUM7UUFFRCx5QkFBTSxHQUFOLFVBQU8sV0FBbUIsRUFBRSxPQUFZO1lBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxHQUFHLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBQzthQUMxRTtZQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBRUQsa0NBQWUsR0FBZjtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQ3pGLENBQUM7UUFFRCxzQ0FBbUIsR0FBbkI7WUFFSSxPQUFPLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUk7Z0JBQ3hDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJO2dCQUMvQixRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUTtnQkFDeEMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVE7Z0JBQ3BDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRO2FBQzNDLElBQUksRUFBRSxDQUFDO1FBQ2hCLENBQUM7UUFFRCwrQ0FBNEIsR0FBNUI7WUFTSSxPQUFPLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTTtnQkFDM0UsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2SSxDQUFDO1FBRUQsdUNBQW9CLEdBQXBCO1lBRUksT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJO2dCQUNmLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7Z0JBQ3JDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVU7Z0JBQ25DLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7Z0JBQ3JDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVU7YUFDdEMsSUFBSSxFQUFFLENBQUM7UUFDaEIsQ0FBQztRQUNMLGVBQUM7SUFBRCxDQUFDLEFBOURELElBOERDO0lBOURZLHdCQUFRLFdBOERwQixDQUFBO0FBQ0wsQ0FBQyxFQWpFUyxlQUFlLEtBQWYsZUFBZSxRQWlFeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1ldGFEYXRhTGlicmFyeSBpcyBhIG1vZHVsZSBmb3Igb2J0YWluaW5nIG1ldGEgZGF0YSBmcm9tIGEgd2luZG93IG9iamVjdC5cbiAqIEV4YW1wbGVzIGFyZTpcbiAqICAgR2V0IHRoZSByZWZlcnJpbmcgcGFnZSBvZiB0aGUgY3VycmVudCBwYWdlXG4gKiAgIEdldCB0aGUgbG9jYXRpb24gZGF0YSAodXJsLCBob3N0bmFtZSwgcGF0aCwgcHJvdG9jb2wpIG9mIHRoZSBjdXJyZW50IHBhZ2VcbiAqICAgR2V0IHRoZSBwZXJmb3JtYW5jZSB0aW1pbmcgZGF0YSBvZiB0aGUgY3VycmVudCBwYWdlLiBUaGlzIGluY2x1ZGVzIGxvYWQgdGltZXNcbiAqICAgICAgcmVxdWVzdCB0aW1lcywgZXRjLlxuICogIEdldCB0aGUgZGltZW5zaW9uIG9mIHRoZSBjdXJyZW50IHBhZ2UsIGluY2x1ZGluZyBvdXRlci9pbm5lciBoZWlnaHQvd2lkdGhcbiAqXG4gKiBCZWNhdXNlIHRoZSBsaWJyYXJ5IGlzIGEgY29udGVudC1zY3JpcHQsIGl0IGNhbm5vdCBsb2FkIG90aGVyIG1vZHVsZXMsXG4gKiBhbmQgcmVsaWVzIG9uIGFueSBhbHJlYWR5IGluamVjdGVkIHNjcmlwdHMgZm9yIGZ1bmN0aW9uYWxpdHkuXG4gKi9cbm5hbWVzcGFjZSBNZXRhRGF0YUxpYnJhcnkge1xuXG4gICAgZXhwb3J0IGNsYXNzIE1ldGFEYXRhIGltcGxlbWVudHMgSUNvbnRleHR1YWxQZWVyTGlicmFyeSB7XG5cbiAgICAgICAgcHJpdmF0ZSBfYXBpTWFwOiB7XG4gICAgICAgICAgICBbcmVxdWVzdFR5cGU6IHN0cmluZ106IEZ1bmN0aW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3RydWN0b3IocHJpdmF0ZSBfd2luZG93OiBXaW5kb3cpIHtcbiAgICAgICAgICAgIHRoaXMuX2FwaU1hcCA9IHtcbiAgICAgICAgICAgICAgICBcIlVCUE1ldGFEYXRhR2V0UGFnZVJlZmVycmVyXCI6IHRoaXMuZ2V0UGFnZVJlZmVycmVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgXCJVQlBNZXRhRGF0YUdldFBhZ2VMb2NhdGlvbkRhdGFcIjogdGhpcy5nZXRQYWdlTG9jYXRpb25EYXRhLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgXCJVQlBNZXRhRGF0YUdldFBhZ2VQZXJmb3JtYW5jZVRpbWluZ0RhdGFcIjogdGhpcy5nZXRQYWdlUGVyZm9ybWFuY2VUaW1pbmdEYXRhLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgXCJVQlBNZXRhRGF0YUdldFBhZ2VEaW1lbnNpb25EYXRhXCI6IHRoaXMuZ2V0UGFnZURpbWVuc2lvbkRhdGEuYmluZCh0aGlzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbkhhbmRsZShyZXF1ZXN0VHlwZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB0aGlzLl9hcGlNYXBbcmVxdWVzdFR5cGVdKSA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaGFuZGxlKHJlcXVlc3RUeXBlOiBzdHJpbmcsIHBheWxvYWQ6IGFueSk6IGFueSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2FuSGFuZGxlKHJlcXVlc3RUeXBlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGFEYXRhTGlicmFyeTogQ2Fubm90IGhhbmRsZSBcIiArIHJlcXVlc3RUeXBlICsgXCIuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FwaU1hcFtyZXF1ZXN0VHlwZV0ocGF5bG9hZCk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYWdlUmVmZXJyZXIoKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93aW5kb3cgJiYgdGhpcy5fd2luZG93LmRvY3VtZW50ICYmIHRoaXMuX3dpbmRvdy5kb2N1bWVudC5yZWZlcnJlciB8fCBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFnZUxvY2F0aW9uRGF0YSgpOiBPYmplY3Qge1xuICAgICAgICAgICAgLy8gTW9ycGggdGhlIHdpbmRvdy5sb2NhdGlvbiBvYmplY3QgaW50byB0aGUgZm9ybSBleHBvc2VkIGJ5IHRoZSBpbnRlcmZhY2UgSVBhZ2VMb2NhdGlvbkRhdGEgaW4gVUJQQ2xpZW50XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2luZG93ICYmIHRoaXMuX3dpbmRvdy5sb2NhdGlvbiAmJiB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5fd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICAgICAgICAgICAgICAgIGhvc3RuYW1lOiB0aGlzLl93aW5kb3cubG9jYXRpb24uaG9zdG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IHRoaXMuX3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6IHRoaXMuX3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbFxuICAgICAgICAgICAgICAgIH0gfHwge307XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYWdlUGVyZm9ybWFuY2VUaW1pbmdEYXRhKCk6IE9iamVjdCB7XG5cbiAgICAgICAgICAgIC8vIEF0IG9uZSBwb2ludCBpdCB3YXMgZGVjaWRlZCBpbiB0aGUgSFRNTCBzcGVjIHRoYXQgSlNPTi5zdHJpbmdpZnkod2luZG93LnBlcmZvcm1hbmNlLnRpbWluZykgd291bGQgcmV0dXJuIFwie31cIiB3aGljaCBpcyBpbmNyZWRpYmx5IHVuaGVscGZ1bC5cbiAgICAgICAgICAgIC8vIEluIG9sZGVyIHZlcnNpb25zIG9mIEZGIGFuZCBDaHJvbWUocHJlIDQyKSB0aGlzIHdvcmtlZCBhcyBleHBlY3RlZC4gRkYgaGFzIGFkZGVkIHN1cHBvcnQgZm9yIGEgLnRvSlNPTigpIG1ldGhvZCBpbiBuZXdlciB2ZXJzaW9ucy5cbiAgICAgICAgICAgIC8vIFdlIHdpbGwgdHJ5IHRvIHVzZSB0aGUgLnRvSlNPTigpIGlmIHN1cHBvcnQgaXMgYXZhaWxhYmxlLCBvdGhlcndpc2Ugd2Ugd2lsbCBqdXN0IHBlcmZvcm0gYSBjb3B5IGJ5IGNyZWF0aW5nIGEgbmV3IG9iamVjdCBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gcGVyZm9ybWFuY2UudGltaW5nIG9iamVjdCBhbmQgcmV0dXJuaW5nIGEgcGxhaW4gSlNPTiBvYmplY3Qgb2YgaXRcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBNb3JlIHJlZmVyZW5jZSBoZXJlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NjA4NTFcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vY29kZXJldmlldy5jaHJvbWl1bS5vcmcvMTE3MTg5MzAwNC9cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93aW5kb3cgJiYgdGhpcy5fd2luZG93LnBlcmZvcm1hbmNlICYmIHRoaXMuX3dpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcgJiZcbiAgICAgICAgICAgICAgICAgICAodGhpcy5fd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZy50b0pTT04oKSB8fCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG5ldyBPYmplY3QodGhpcy5fd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZykpKSkgfHwge307XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYWdlRGltZW5zaW9uRGF0YSgpOiBPYmplY3Qge1xuICAgICAgICAgICAgLy8gTW9ycGggdGhlIHdpbmRvdyBkaW1lbnNpb25zIGludG8gdGhlIGZvcm0gZXhwb3NlZCBieSB0aGUgaW50ZXJmYWNlIElQYWdlRGltZW5zaW9uRGF0YSBpbiBVQlBDbGllbnRcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93aW5kb3cgJiYge1xuICAgICAgICAgICAgICAgICAgICBvdXRlckhlaWdodDogdGhpcy5fd2luZG93Lm91dGVySGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBvdXRlcldpZHRoOiB0aGlzLl93aW5kb3cub3V0ZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJIZWlnaHQ6IHRoaXMuX3dpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJXaWR0aDogdGhpcy5fd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgICAgICAgICB9IHx8IHt9O1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
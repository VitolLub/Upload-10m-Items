var PageMessagingChromeDriver;
(function (PageMessagingChromeDriver) {
    PageMessagingChromeDriver.ExtensionNamespace = typeof browser != 'undefined' ? browser : chrome;
    function bootstrap() {
        if (!this.initialized) {
            this.initialized = true;
            PageMessagingChromeDriver.ExtensionNamespace.runtime.onMessage.addListener(function (request) {
                window.parent.postMessage(request, "*");
            });
            window.addEventListener("message", function (message) {
                if (message.data && message.data.UBPMessageType === "UBPMessage") {
                    var messageToSend = {
                        type: "UBPExternalMessage.Sandbox",
                        payload: {
                            mType: message && message.data && message.data.type,
                            handle: -1,
                            data: message.data
                        }
                    };
                    PageMessagingChromeDriver.ExtensionNamespace.runtime.sendMessage(messageToSend);
                }
            });
        }
    }
    PageMessagingChromeDriver.bootstrap = bootstrap;
    PageMessagingChromeDriver.bootstrap.call(PageMessagingChromeDriver);
})(PageMessagingChromeDriver || (PageMessagingChromeDriver = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZU1lc3NhZ2luZ0RyaXZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy91YnAvZXh0ZW5zaW9uL2NvbnRleHR1YWwvcGVlci1zY3JpcHRzL2RyaXZlcnMvY2hyb21lL1BhZ2VNZXNzYWdpbmdEcml2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBY0EsSUFBVSx5QkFBeUIsQ0EyRWxDO0FBM0VELFdBQVUseUJBQXlCO0lBU3BCLDRDQUFrQixHQUFRLE9BQU8sT0FBTyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFpQnRGLFNBQWdCLFNBQVM7UUFHckIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFLbkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFLeEIsMEJBQUEsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsVUFBQyxPQUFPO2dCQUNyRCxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUFDLENBQUM7WUFLSCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFVBQUMsT0FBVztnQkFLM0MsSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxLQUFLLFlBQVksRUFBRTtvQkFHOUQsSUFBSSxhQUFhLEdBQU87d0JBQ3BCLElBQUksRUFBRSw0QkFBNEI7d0JBQ2xDLE9BQU8sRUFBRTs0QkFDTCxLQUFLLEVBQUUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJOzRCQUNuRCxNQUFNLEVBQUUsQ0FBQyxDQUFDOzRCQUNWLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTt5QkFDckI7cUJBQ0osQ0FBQztvQkFLRiwwQkFBQSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUN6RDtZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFFTCxDQUFDO0lBN0NlLG1DQUFTLFlBNkN4QixDQUFBO0lBR0QseUJBQXlCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ3hFLENBQUMsRUEzRVMseUJBQXlCLEtBQXpCLHlCQUF5QixRQTJFbEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZHJpdmVyIGlzIG9ubHkgaW5qZWN0ZWQgb24gdGhlIDFCQS9TbWlsZSBMYW5kaW5nIFBhZ2VzLCBhcyBkZWZpbmVkIGluIHRoZVxuICogbWFuaWZlc3QuanNvbiBmaWxlIGZvciBDaHJvbWVsaWtlIGJyb3dzZXJzLiBJdCBzaW1wbHkgbGlzdGVucyBmb3IgbGVnYWN5IGV4dGVybmFsIG1lc3NhZ2VzXG4gKiB0aGF0IGNoZWNrIHdoZXRoZXIgdGhlIGV4dGVuc2lvbiBpcyBpbnN0YWxsZWQgYW5kIGFsbG93IGVuYWJsaW5nIFNtaWxlIE1vZGUuIFRoaXMgZHJpdmVyXG4gKiBqdXN0IGZvcndhcmRzIG1lc3NhZ2VzIGJvdGggd2F5cy5cbiAqXG4gKiBUaGlzIGRyaXZlciBib290c3RyYXBzIHVuZGVyIENocm9tZSdzIGNvbnRlbnQgc2NyaXB0XG4gKiBlbnZpcm9ubWVudCBvbmx5IE9OQ0U6IFRvIGF2b2lkIGR1cGxpY2F0ZSBsaXN0ZW5lcnMgb24gY2hyb21lIHJ1bnRpbWVcbiAqIG1lc3NhZ2VzLCB7QGxpbmsgUGFnZU1lc3NhZ2luZ0Nocm9tZURyaXZlciNib290c3RyYXB9IHdpbGwgb25seSByZWdpc3RlciB0aGUgbGlzdGVuZXIgb25jZVxuICogd2l0aGluIHRoZSBjb250ZW50IHNjcmlwdCBKUkUgbGlmZXRpbWUgYnkgaWdub3JpbmcgYWxsIHN1YnNlcXVlbnQgY2FsbHMuXG4gKlxuICogWFhYOiBwZWVyIHNjcmlwdHMgY2Fubm90IHVzZSB0aGUgbW9kdWxlIGxvYWRlciBhcyB0aGV5IGFyZSB0byBiZSBpbmplY3RlZFxuICogb250byB0aGUgcGFnZSBkaXJlY3RseSBhbmQgdGh1cyBuZWVkIHRvIGxpZ2h0LXdlaWdodC5cbiAqL1xubmFtZXNwYWNlIFBhZ2VNZXNzYWdpbmdDaHJvbWVEcml2ZXIge1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBydW50aW1lIGV4dGVuc2lvbiBuYW1lc3BhY2UsIHdoaWNoIGlzIHRoZSBleHRlbnNpb24gQXBpIG5hbWVzcGFjZVxuICAgICAqIGZvciBjaHJvbWUsIGl0IGlzIGNocm9tZVxuICAgICAqIGZvciBlZGdlLCBpdCBpcyBlZGdlXG4gICAgICogSXQgd2lsbCBiZSBpZGVhbCB3ZSBjYW4gZ2V0IHRoaXMgZnJvbSBSdW50aW1tZVxuICAgICAqIEB0eXBlIHticm93c2VyfGNocm9tZX1cbiAgICAgKi9cbiAgICBleHBvcnQgdmFyIEV4dGVuc2lvbk5hbWVzcGFjZTogYW55ID0gdHlwZW9mIGJyb3dzZXIgIT0gJ3VuZGVmaW5lZCcgPyBicm93c2VyIDogY2hyb21lO1xuXG4gICAgLyoqXG4gICAgICogR2xvYmFsIEZsYWcgdG8gZW5zdXJlIGJvb3RzdHJhcHBpbmcgb25seSBoYXBwZW5zIG9uY2UuXG4gICAgICpcbiAgICAgKiBYWFg6IFR5cGVzY3JpcHQgY29tcGlsZXIgdHJhbnNsYXRlcyB0aGlzIGxpbmUgaW50b1xuICAgICAqIFwiUGFnZU1lc3NhZ2luZ0Nocm9tZURyaXZlci5pbml0aWFsaXplZDtcIiwgd2hpY2ggaGFzIG5vIGVmZmVjdFxuICAgICAqIHRvIGl0cyBzdGF0ZSB3aGV0aGVyIGlmIGl0IGV4aXN0cyBhbHJlYWR5XG4gICAgICovXG4gICAgZXhwb3J0IHZhciBpbml0aWFsaXplZDpib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQm9vdHN0cmFwcyB0aGUgY29udGV4dHVhbCBwZWVyIGxpYnJhcnkgdG8gdGhlIGNvbnRleHQgc2NyaXB0IHJ1bnRpbWVcbiAgICAgKlxuICAgICAqIE5vdGU6IFwidGhpc1wiIGlzIHN1cHBvc2UgdG8gYmluZCB0byB0aGUgbW9kdWxlIG5hbWVzcGFjZVxuICAgICAqXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGJvb3RzdHJhcCgpIHtcblxuICAgICAgICAvLyBBbGxvdyBib290c3RyYXAgdG8gaGFwcGVuIG9ubHkgb25jZSBwZXIgSlJFXG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEluaXRpYWxpemVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTGlzdGVuIGZvciBtZXNzYWdlcyBmcm9tIHRoZSBleHRlbnNpb24sIGFuZCBmb3J3YXJkIHRoZW0gdG8gdGhlIHBhZ2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRXh0ZW5zaW9uTmFtZXNwYWNlLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShyZXF1ZXN0LCBcIipcIik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMaXN0ZW4gZm9yIG1lc3NhZ2VzIGZyb20gdGhlIHBhZ2UsIGFuZCBmb3J3YXJkIHRoZW0gdG8gdGhlIGV4dGVuc2lvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKG1lc3NhZ2U6YW55KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBPbmx5IHN1cHBvcnQgbGVnYWN5IGV4dGVybmFsIG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZGF0YSAmJiBtZXNzYWdlLmRhdGEuVUJQTWVzc2FnZVR5cGUgPT09IFwiVUJQTWVzc2FnZVwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQnVpbGQgdGhlIG1lc3NhZ2UgdG8gc2VuZFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVRvU2VuZDphbnkgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlVCUEV4dGVybmFsTWVzc2FnZS5TYW5kYm94XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbVR5cGU6IG1lc3NhZ2UgJiYgbWVzc2FnZS5kYXRhICYmIG1lc3NhZ2UuZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZTogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbWVzc2FnZS5kYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFNlbmQgdGhlIG1lc3NhZ2UgdG8gdGhlIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgRXh0ZW5zaW9uTmFtZXNwYWNlLnJ1bnRpbWUuc2VuZE1lc3NhZ2UobWVzc2FnZVRvU2VuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIGNhbGwgZXZlcnkgdGltZSB0aGUgZHJpdmVyIGlzIGluamVjdGVkIGJ1dCBvbmx5IHRoZSBmaXJzdCB3aWxsIHN1Y2NlZWRcbiAgICBQYWdlTWVzc2FnaW5nQ2hyb21lRHJpdmVyLmJvb3RzdHJhcC5jYWxsKFBhZ2VNZXNzYWdpbmdDaHJvbWVEcml2ZXIpO1xufVxuIl19
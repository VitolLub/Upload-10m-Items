var ChromeSandboxPeerDriver;
(function (ChromeSandboxPeerDriver) {
    ChromeSandboxPeerDriver.ExtensionNamespace = typeof browser != 'undefined' ? browser : chrome;
    ChromeSandboxPeerDriver.customWindow = window;
    function getTime() {
        return (window.performance) ? window.performance.now() : Date.now();
    }
    ChromeSandboxPeerDriver.getTime = getTime;
    function createNewResponse(messageId) {
        return {
            msgId: messageId,
            error: undefined,
            payload: undefined,
            performanceTiming: {
                requestStart: undefined,
                requestEnd: undefined
            }
        };
    }
    function handleMessage(request, sender, sendResponse) {
        if (request && ChromeSandboxPeerDriver.customWindow._chromeSandboxLibrary.canHandle(request.type)) {
            var response = createNewResponse(request.msgId);
            try {
                response.performanceTiming.requestStart = this.getTime();
                response.payload = ChromeSandboxPeerDriver.customWindow._chromeSandboxLibrary.handle(request.type, request.payload);
                response.performanceTiming.requestEnd = this.getTime();
            }
            catch (e) {
                response.error = (e && typeof e.toString === "function") ? e.toString() : "Error object in ChromeSandboxPeerDriver is undefined or has no toString method";
            }
            finally {
                if (response.payload && typeof response.payload.then === "function") {
                    response.payload.then(function (result) {
                        response.payload = result;
                        sendResponse(response);
                    }).catch(function (error) {
                        response.payload = null;
                        response.error = error.toString();
                        sendResponse(response);
                    });
                    return true;
                }
                else {
                    sendResponse(response);
                }
            }
        }
    }
    ChromeSandboxPeerDriver.handleMessage = handleMessage;
    function bootstrap() {
        if (!ChromeSandboxPeerDriver.customWindow) {
            ChromeSandboxPeerDriver.customWindow = window;
        }
        if (!ChromeSandboxPeerDriver.customWindow._chromeSandboxLibrary) {
            ChromeSandboxPeerDriver.customWindow._chromeSandboxLibrary = new SandboxLibrary.Sandboxer(function (msg) {
                ChromeSandboxPeerDriver.ExtensionNamespace.runtime.sendMessage({
                    type: "UBPExternalMessage.Sandbox",
                    payload: msg
                });
            });
            ChromeSandboxPeerDriver.ExtensionNamespace.runtime.onMessage.addListener(this.handleMessage.bind(this));
            window.addEventListener("message", function () {
                ChromeSandboxPeerDriver.customWindow._chromeSandboxLibrary.sandboxMessageHandler.apply(ChromeSandboxPeerDriver.customWindow._chromeSandboxLibrary, arguments);
            });
        }
    }
    ChromeSandboxPeerDriver.bootstrap = bootstrap;
    ChromeSandboxPeerDriver.bootstrap.call(ChromeSandboxPeerDriver);
})(ChromeSandboxPeerDriver || (ChromeSandboxPeerDriver = {}));
//# sourceMappingURL=data:application/json;base64,
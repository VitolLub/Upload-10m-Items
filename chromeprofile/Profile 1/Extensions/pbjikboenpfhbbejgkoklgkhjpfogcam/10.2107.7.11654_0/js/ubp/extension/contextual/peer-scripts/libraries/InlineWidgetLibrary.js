var InlineWidgetLibrary;
(function (InlineWidgetLibrary) {
    var COLON = ":";
    var SEMICOLON = ";";
    var InlineWidgetHandler = (function () {
        function InlineWidgetHandler() {
            this.inlineWidgetPrefix = "UBPInlineWidget";
            this.inlineWidgetManager = new InlineWidgetManager();
        }
        InlineWidgetHandler.prototype.handle = function (requestType, args) {
            if (args === undefined || args === null) {
                throw new Error("Must provide arguments to InlineWidget API's");
            }
            switch (requestType) {
                case this.inlineWidgetPrefix.concat("createElement"):
                    if (args.id === undefined || args.style === undefined || args.tag === undefined)
                        throw new Error("Invalid arguments for createElement");
                    return this.inlineWidgetManager.createElement(args.id, args.tag, args.style);
                default:
                    throw new Error("Invalid request type: " + requestType);
            }
        };
        InlineWidgetHandler.prototype.canHandle = function (requestType) {
            switch (requestType) {
                case this.inlineWidgetPrefix.concat("createElement"):
                    return true;
                default:
                    return false;
            }
        };
        return InlineWidgetHandler;
    }());
    InlineWidgetLibrary.InlineWidgetHandler = InlineWidgetHandler;
    var InlineWidgetManager = (function () {
        function InlineWidgetManager() {
        }
        InlineWidgetManager.prototype.createElement = function (id, tag, style) {
            if (document.getElementById(id))
                throw new Error("id: " + id + " already exists!");
            var element = document.createElement(tag);
            element.setAttribute('id', id);
            var styleString = this._buildCssString(style);
            element.setAttribute('style', styleString);
            document.body.appendChild(element);
        };
        InlineWidgetManager.prototype._buildCssString = function (cssSpec) {
            var styleRulesArray = [];
            for (var styleName in cssSpec) {
                if (cssSpec.hasOwnProperty(styleName)) {
                    styleRulesArray.push([styleName, cssSpec[styleName]].join(COLON));
                }
            }
            return styleRulesArray.join(SEMICOLON).concat(SEMICOLON);
        };
        return InlineWidgetManager;
    }());
    InlineWidgetLibrary.InlineWidgetManager = InlineWidgetManager;
})(InlineWidgetLibrary || (InlineWidgetLibrary = {}));
//# sourceMappingURL=data:application/json;base64,
var ChromeInlineWidgetDriver;
(function (ChromeInlineWidgetDriver) {
    ChromeInlineWidgetDriver.ExtensionNamespace = typeof browser != 'undefined' ? browser : chrome;
    ChromeInlineWidgetDriver.library = new InlineWidgetLibrary.InlineWidgetHandler();
    function getTime() {
        return (window.performance) ? window.performance.now() : Date.now();
    }
    ChromeInlineWidgetDriver.getTime = getTime;
    function createNewResponse(messageId) {
        return {
            msgId: messageId,
            error: undefined,
            payload: undefined,
            performanceTiming: {
                requestStart: undefined,
                requestEnd: undefined
            }
        };
    }
    function handleMessage(request, sender, sendResponse) {
        if (request && this.library.canHandle(request.type)) {
            var response = createNewResponse(request.msgId);
            var functionString = "function";
            try {
                response.performanceTiming.requestStart = this.getTime();
                response.payload = this.library.handle(request.type, request.payload);
                response.performanceTiming.requestEnd = this.getTime();
            }
            catch (e) {
                response.error = (e && typeof e.toString === functionString) ? e.toString() : "Error object in ChromeInlineWidgetDriver is undefined or has no toString method";
            }
            finally {
                if (response.payload && typeof response.payload.then === functionString) {
                    response.payload.then(function (result) {
                        response.payload = result;
                        sendResponse(response);
                    }).catch(function (error) {
                        response.payload = null;
                        response.error = error.toString();
                        sendResponse(response);
                    });
                    return true;
                }
                else {
                    sendResponse(response);
                }
            }
        }
    }
    ChromeInlineWidgetDriver.handleMessage = handleMessage;
    function bootstrap() {
        if (!this.initialized) {
            this.initialized = true;
            ChromeInlineWidgetDriver.ExtensionNamespace.runtime.onMessage.addListener(this.handleMessage.bind(this));
        }
    }
    ChromeInlineWidgetDriver.bootstrap = bootstrap;
    ChromeInlineWidgetDriver.bootstrap.call(ChromeInlineWidgetDriver);
})(ChromeInlineWidgetDriver || (ChromeInlineWidgetDriver = {}));
//# sourceMappingURL=data:application/json;base64,
var SandboxLibrary;
(function (SandboxLibrary) {
    var Sandboxer = (function () {
        function Sandboxer(extensionMessageProxy) {
            this.sandboxMessagePrefix = "UBPSandboxer";
            this.sandboxManager = new SandboxLibrary.SandboxManager({
                strategy: new SandboxLibrary.IFrameCreationStrategy(),
                forwardMessageFunction: extensionMessageProxy,
                whitelistedOrigins: {}
            });
        }
        Sandboxer.prototype.sandboxMessageHandler = function (msg) {
            this.sandboxManager.sandboxMessageHandler(msg);
        };
        Sandboxer.prototype.handle = function (requestType, args) {
            if (!args) {
                throw new Error("Must provide arguments to Sandbox API's");
            }
            switch (requestType) {
                case this.sandboxMessagePrefix.concat("CreateSandbox"):
                    if (args.tabId && args.sandboxSpecification) {
                        return this.sandboxManager.createSandbox(args.tabId, args.sandboxSpecification);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("CreateSandboxById"):
                    if (args.tabId && args.sandboxSpecification) {
                        return this.sandboxManager.createSandboxById(args.tabId, args.sandboxSpecification);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("CreateSandboxByIdPost"):
                    if (args.tabId && args.sandboxSpecification) {
                        return this.sandboxManager.createSandboxByIdPost(args.tabId, args.sandboxSpecification);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("ModifySandbox"):
                    if (args.sandboxId && args.sandboxCSSSpecification) {
                        return this.sandboxManager.modifySandbox(args.sandboxId, args.sandboxCSSSpecification);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("ShowSandbox"):
                    if (args.sandboxId && args.sandboxCSSSpecification) {
                        return this.sandboxManager.showSandbox(args.sandboxId, args.sandboxCSSSpecification, args.pageStyleSpecification);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("DestroySandbox"):
                    if (args.sandboxId) {
                        return this.sandboxManager.destroySandbox(args.sandboxId);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("AddWhitelistedOrigin"):
                    if (args.origin) {
                        return this.sandboxManager.addWhitelistedOrigin(args.origin);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("SendMessageToSandbox"):
                    if (args.sandboxId && args.message) {
                        return this.sandboxManager.sendMessageToSandbox(args.sandboxId, args.message);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("InstrumentSandbox"):
                    if (args.tabId && args.sandboxSelector && args.message) {
                        return this.sandboxManager.instrumentSandbox(args.tabId, args.sandboxSelector, args.message);
                    }
                    break;
                case this.sandboxMessagePrefix.concat("GetSandboxAttribute"):
                    if (args.tabId && args.sandboxSelector && args.message) {
                        return this.sandboxManager.getSandboxAttribute(args.tabId, args.sandboxSelector, args.message);
                    }
                    break;
                default:
                    throw new Error("Invalid request type: " + requestType);
            }
            throw new Error("Invalid args for sandbox message: " + requestType);
        };
        Sandboxer.prototype.canHandle = function (requestType) {
            switch (requestType) {
                case this.sandboxMessagePrefix.concat("CreateSandbox"):
                case this.sandboxMessagePrefix.concat("CreateSandboxById"):
                case this.sandboxMessagePrefix.concat("CreateSandboxByIdPost"):
                case this.sandboxMessagePrefix.concat("ModifySandbox"):
                case this.sandboxMessagePrefix.concat("ShowSandbox"):
                case this.sandboxMessagePrefix.concat("DestroySandbox"):
                case this.sandboxMessagePrefix.concat("AddWhitelistedOrigin"):
                case this.sandboxMessagePrefix.concat("SendMessageToSandbox"):
                case this.sandboxMessagePrefix.concat("InstrumentSandbox"):
                case this.sandboxMessagePrefix.concat("GetSandboxAttribute"):
                    return true;
                default:
                    return false;
            }
        };
        return Sandboxer;
    }());
    SandboxLibrary.Sandboxer = Sandboxer;
    var SandboxManager = (function () {
        function SandboxManager(args) {
            this.instanceId = randomInteger();
            this.pendingSandboxes = {};
            this.establishedSandboxes = {};
            if (args.strategy) {
                this.strategy = args.strategy;
            }
            else {
                throw new Error("SandboxManager requires a notification creation strategy");
            }
            this.forwardMessageFunction = args.forwardMessageFunction || function () {
            };
            this.whitelistedOrigins = args.whitelistedOrigins || {};
        }
        SandboxManager.prototype.sandboxMessageHandler = function (msg) {
            if (!this._isRelevantMessage(msg)) {
                return;
            }
            msg = msg;
            if (this._isHandshakeMessage(msg)) {
                this._handleHandshake(msg);
            }
            else {
                this._handleMessage(msg);
            }
        };
        SandboxManager.prototype.createSandbox = function (tabId, sandboxSpec) {
            var targetUrl = sandboxSpec.url, proxyUrl = sandboxSpec.proxy, cssSpec = sandboxSpec.sandboxCSSSpecification;
            if (!(targetUrl && proxyUrl)) {
                throw new Error("Must provide both proxy and target url to createSandbox");
            }
            var handle = this._generateSandboxHandle();
            if (targetUrl.match(/[&\?]ubpSandboxHandle=/)) {
                throw new Error("target URL already contains a reserved query string key: ubpSandboxHandle");
            }
            targetUrl = appendQueryParams(targetUrl, {
                "ubpSandboxHandle": "1"
            });
            if (proxyUrl.match(/[&\?]target=/)) {
                throw new Error("proxy URL already contains a reserved query string key: target");
            }
            proxyUrl = appendQueryParams(proxyUrl, {
                "ubpSandboxHandle": handle,
                "target": targetUrl
            });
            this.strategy.createSandbox(tabId, handle, proxyUrl, cssSpec);
            this.pendingSandboxes[handle] = true;
            var origin = this.strategy.grokOrigin(proxyUrl);
            if (origin) {
                this.addWhitelistedOrigin(origin);
            }
            return handle;
        };
        SandboxManager.prototype.createSandboxById = function (tabId, sandboxSpec) {
            var targetUrl = sandboxSpec.url, proxyUrl = sandboxSpec.proxy, sandboxId = sandboxSpec.sandboxId, cssSpec = sandboxSpec.sandboxCSSSpecification;
            if (!(targetUrl && proxyUrl)) {
                throw new Error("Must provide both proxy and target url to createSandbox");
            }
            if (!sandboxId) {
                throw new Error("Must provide sandbox Id to createSandbox");
            }
            var sandbox = this.strategy._sandboxInMemoryStorage.retrieveSandboxBySandboxId(sandboxId);
            if (sandbox) {
                return sandboxId;
            }
            if (targetUrl.match(/[&\?]ubpSandboxHandle=/)) {
                throw new Error("target URL already contains a reserved query string key: ubpSandboxHandle");
            }
            targetUrl = appendQueryParams(targetUrl, {
                "ubpSandboxHandle": "1"
            });
            if (proxyUrl.match(/[&\?]target=/)) {
                throw new Error("proxy URL already contains a reserved query string key: target");
            }
            proxyUrl = appendQueryParams(proxyUrl, {
                "ubpSandboxHandle": sandboxId,
                "target": targetUrl
            });
            this.strategy.createSandbox(tabId, sandboxId, proxyUrl, cssSpec);
            this.pendingSandboxes[sandboxId] = true;
            var origin = this.strategy.grokOrigin(proxyUrl);
            if (origin) {
                this.addWhitelistedOrigin(origin);
            }
            return sandboxId;
        };
        SandboxManager.prototype.createSandboxByIdPost = function (tabId, sandboxSpec) {
            var target = sandboxSpec.url, jsonMsg = sandboxSpec.jsonMsg, proxyUrl = sandboxSpec.proxy, sandboxId = sandboxSpec.sandboxId, cssSpec = sandboxSpec.sandboxCSSSpecification;
            if (!(target && jsonMsg && proxyUrl)) {
                throw new Error("Must provide proxy, target url and jsonMsg to createSandbox");
            }
            if (!sandboxId) {
                throw new Error("Must provide sandbox Id to createSandbox");
            }
            var sandbox = this.strategy._sandboxInMemoryStorage.retrieveSandboxBySandboxId(sandboxId);
            if (sandbox) {
                return sandboxId;
            }
            if (proxyUrl.match(/[&\?]target=/)) {
                throw new Error("proxy URL already contains a reserved query string key: target");
            }
            proxyUrl = appendQueryParams(proxyUrl, {
                "ubpSandboxHandle": sandboxId,
                "target": target,
                "jsonMsg": jsonMsg
            });
            this.strategy.createSandbox(tabId, sandboxId, proxyUrl, cssSpec);
            this.pendingSandboxes[sandboxId] = true;
            var origin = this.strategy.grokOrigin(proxyUrl);
            if (origin) {
                this.addWhitelistedOrigin(origin);
            }
            return sandboxId;
        };
        SandboxManager.prototype.modifySandbox = function (handle, sandboxCSSSpecification) {
            this.strategy.modifySandbox(handle, sandboxCSSSpecification);
        };
        SandboxManager.prototype.showSandbox = function (handle, sandboxCSSSpecification, pageStyleSpecification) {
            this.strategy.showSandbox(handle, sandboxCSSSpecification, pageStyleSpecification);
        };
        SandboxManager.prototype.destroySandbox = function (handle) {
            delete this.pendingSandboxes[handle];
            delete this.establishedSandboxes[handle];
            this.strategy.destroySandbox(handle);
        };
        SandboxManager.prototype.addWhitelistedOrigin = function (origin) {
            this.whitelistedOrigins[origin] = origin;
        };
        SandboxManager.prototype.sendMessageToSandbox = function (handle, message) {
            this.strategy.sendMessageToSandbox(handle, message);
        };
        SandboxManager.prototype.instrumentSandbox = function (tabId, sandboxSelector, message) {
            return this.strategy.instrumentSandbox(tabId, sandboxSelector, message);
        };
        SandboxManager.prototype.getSandboxAttribute = function (tabId, sandboxSelector, message) {
            return this.strategy.getSandboxAttribute(tabId, sandboxSelector, message);
        };
        SandboxManager.prototype._handleMessage = function (msg) {
            if (msg.data && msg.data.mType === "InstrumentMessage") {
                if (typeof SandboxLibrary.instrumentMessages[msg.data['instrumentMessageId']] === "function") {
                    SandboxLibrary.instrumentMessages[msg.data['instrumentMessageId']](msg.data['data']);
                    delete SandboxLibrary.instrumentMessages[msg.data['instrumentMessageId']];
                }
            }
            else {
                this.forwardMessageFunction(msg.data);
            }
        };
        SandboxManager.prototype._handleHandshake = function (msg) {
            var handle = msg.data.handle;
            this.establishedSandboxes[handle] = msg.source;
            delete this.pendingSandboxes[handle];
        };
        SandboxManager.prototype._isValidOrigin = function (origin) {
            return !!this.whitelistedOrigins[origin];
        };
        SandboxManager.prototype._isRelevantMessage = function (msg) {
            return !!(msg &&
                msg.source &&
                msg.data &&
                msg.data.mType &&
                msg.data.handle &&
                this._isValidOrigin(this.strategy.grokOrigin(msg.origin)));
        };
        SandboxManager.prototype._isHandshakeMessage = function (msg) {
            return msg.data.mType === SandboxManager.SANDBOX_HANDSHAKE;
        };
        SandboxManager.prototype._generateSandboxHandle = function () {
            return SandboxManager.SANDBOX_PREFIX +
                "_iid=" + this.instanceId +
                "_sid=" + randomInteger() +
                "_time=" + Date.now();
        };
        SandboxManager.SANDBOX_HANDSHAKE = "UBPSandboxHandshake";
        SandboxManager.SANDBOX_PREFIX = "UBPNotif";
        return SandboxManager;
    }());
    SandboxLibrary.SandboxManager = SandboxManager;
    var IFrameCreationStrategy = (function () {
        function IFrameCreationStrategy() {
            this._defaultCSSRules = {
                "background": "transparent",
                "border": "0",
                "box-shadow": "none",
                "display": "block",
                "height": "0px",
                "left": "0",
                "overflow-x": "visible",
                "overflow-y": "visible",
                "padding": "0",
                "position": "absolute",
                "right": "auto",
                "top": "0",
                "width": "0px",
                "z-index": "99999"
            };
            this._sandboxInMemoryStorage = new SandboxInMemoryStorage();
        }
        IFrameCreationStrategy.prototype.grokOrigin = function (url) {
            var a = document.createElement("a");
            a.href = url;
            return (a.protocol + "//" + a.host).toLowerCase();
        };
        IFrameCreationStrategy.prototype.createSandbox = function (tabId, sandboxId, proxyUrl, cssSpec) {
            var selectorToUse = IFrameCreationStrategy.SELECTORS_TO_QUERY[Math.floor(Math.random() * IFrameCreationStrategy.SELECTORS_TO_QUERY.length)];
            var originalNodesOnPage = document.querySelectorAll(selectorToUse);
            if (!originalNodesOnPage || originalNodesOnPage.length === 0) {
                var elementTagToUse = IFrameCreationStrategy.ELEMENT_TO_CREATE_AS_FALLBACK[Math.floor(Math.random() * IFrameCreationStrategy.ELEMENT_TO_CREATE_AS_FALLBACK.length)];
                var newNodeToInsert = document.createElement(elementTagToUse);
                this._attachShadowDOMAndAppendToBody(newNodeToInsert, tabId, sandboxId, proxyUrl, cssSpec);
                return;
            }
            var randomNumber = Math.floor(Math.random() * originalNodesOnPage.length);
            var originalNode = originalNodesOnPage[randomNumber];
            var cloneElementToAttachTo = this._createAndSanitizeCloneElement(originalNode);
            this._attachShadowDOMAndAppendToBody(cloneElementToAttachTo, tabId, sandboxId, proxyUrl, cssSpec);
        };
        IFrameCreationStrategy.prototype._createAndSanitizeCloneElement = function (originalNode) {
            var cloneElement = originalNode.cloneNode(true);
            cloneElement.removeAttribute("id");
            cloneElement.removeAttribute("class");
            cloneElement.removeAttribute("style");
            cloneElement.removeAttribute("hidden");
            for (var i = 0; i < cloneElement.attributes.length; i++) {
                cloneElement.removeAttribute(cloneElement.attributes[i].name);
            }
            var childrenWithIds = cloneElement.querySelectorAll("[id]");
            for (var i = 0; i < childrenWithIds.length; i++) {
                childrenWithIds[i].removeAttribute("id");
            }
            return cloneElement;
        };
        IFrameCreationStrategy.prototype._generateRandomClassName = function () {
            var className = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0;
                var v = (c == 'x' ? r : (r & 0x3 | 0x8));
                return v.toString(16);
            });
            className = window.btoa(className);
            if (className.length >= 15) {
                className = className.substring(0, Math.floor(Math.random() * Math.min(11, (className.length - 4))) + 4);
            }
            return className;
        };
        IFrameCreationStrategy.prototype._attachShadowDOMAndAppendToBody = function (elementToAttachShadow, tabId, sandboxId, proxyUrl, cssSpec) {
            try {
                elementToAttachShadow.setAttribute("class", this._generateRandomClassName());
                var shadowRoot = elementToAttachShadow.attachShadow({ mode: "closed" });
                shadowRoot._hostElementOfShadowRoot = elementToAttachShadow;
                var sandbox = document.createElement("iframe");
                sandbox.style.cssText = this._buildCssString(this._defaultCSSRules).concat(this._buildCssString(cssSpec));
                sandbox.src = proxyUrl;
                sandbox.setAttribute("id", sandboxId);
                shadowRoot.appendChild(sandbox);
                document.body.appendChild(elementToAttachShadow);
                this._sandboxInMemoryStorage.storeShadowRoot(shadowRoot, tabId, sandboxId, proxyUrl);
            }
            catch (err) {
                throw new Error("Error occurred while attaching shadow: " + err.toString());
            }
        };
        IFrameCreationStrategy.prototype.modifySandbox = function (sandboxId, cssSpec) {
            var sandbox = this._sandboxInMemoryStorage.retrieveSandboxBySandboxId(sandboxId);
            if (!sandbox) {
                throw new Error("Cannot modify sandbox; wasn't found");
            }
            sandbox.style.cssText += this._buildCssString(cssSpec);
        };
        IFrameCreationStrategy.prototype.showSandbox = function (sandboxId, cssSpec, pageStyleSpecification) {
            var sandbox = this._sandboxInMemoryStorage.retrieveSandboxBySandboxId(sandboxId);
            if (!sandbox) {
                throw new Error("Cannot show sandbox; wasn't found");
            }
            if (pageStyleSpecification &&
                pageStyleSpecification.elementCssSelector &&
                pageStyleSpecification.inlineCss &&
                pageStyleSpecification.styleHandle) {
                var element = this._getParentPageElement(pageStyleSpecification.elementCssSelector);
                if (!element.dataset["ubpOldStyle"]) {
                    element.dataset["ubpOldStyle"] = element.getAttribute("style") || "-custom-noop: noop;";
                }
                element.dataset["ubpStyleHandle"] = pageStyleSpecification.styleHandle;
                var styleToSet = null;
                if (element.dataset["ubpOldStyle"]) {
                    styleToSet = [element.dataset["ubpOldStyle"], pageStyleSpecification.inlineCss].join("; ") + "; ";
                }
                else {
                    styleToSet = pageStyleSpecification.inlineCss + "; ";
                }
                element.setAttribute("style", styleToSet);
            }
            if (pageStyleSpecification) {
                var cssRules = pageStyleSpecification.styleSheetCSSRules || [];
                if (!!pageStyleSpecification.styleSheetCSSRule) {
                    cssRules.push(pageStyleSpecification.styleSheetCSSRule);
                }
                if (cssRules.length > 0) {
                    this._applyStyleSheetCSSRule(sandboxId, cssRules);
                }
            }
            sandbox.style.cssText += this._buildCssString(cssSpec);
        };
        IFrameCreationStrategy.prototype.sendMessageToSandbox = function (sandboxId, message) {
            var sandbox = this._sandboxInMemoryStorage.retrieveSandboxBySandboxId(sandboxId);
            if (!sandbox || !sandbox.contentWindow) {
                throw new Error("Cannot send message to sandbox; Sandbox with id: '" + sandboxId + "' is not valid");
            }
            try {
                sandbox.contentWindow.postMessage(message, "*");
            }
            catch (e) {
                var error = new Error("Error while sending message to sandbox: " + e);
                throw error;
            }
        };
        IFrameCreationStrategy.prototype.instrumentSandbox = function (tabId, sandBoxSelector, message) {
            var element = (this._sandboxInMemoryStorage.retrieveSandboxByTabIdSandboxSelector(tabId, sandBoxSelector));
            if (!element) {
                throw new Error("instrumentSandbox: ElementNotFound");
            }
            try {
                var instrumentMessageId = randomInteger();
                return new Promise(function (resolve, reject) {
                    SandboxLibrary.instrumentMessages[instrumentMessageId] = resolve;
                    message.messageName = "InstrumentMessage";
                    message.instrumentMessageId = instrumentMessageId;
                    if (!element.contentWindow) {
                        reject("ElementNotAnIFrame");
                    }
                    else {
                        element.contentWindow.postMessage(message, "*");
                    }
                });
            }
            catch (e) {
                var error = new Error("Error while sending message to instrument sandbox: " + e);
                throw error;
            }
        };
        IFrameCreationStrategy.prototype.getSandboxAttribute = function (tabId, sandboxSelector, message) {
            if (!message || !message.action || !message.action.attributeName) {
                throw new Error("InvalidMessage for getSandboxAttribute" + message);
            }
            var element = (this._sandboxInMemoryStorage.retrieveSandboxByTabIdSandboxSelector(tabId, sandboxSelector));
            if (!element) {
                throw new Error("ElementNotFound to retrieve sandbox attribute");
            }
            return element.getAttribute(message.action.attributeName);
        };
        IFrameCreationStrategy.prototype.destroySandbox = function (sandboxId) {
            var shadowRoot = this._sandboxInMemoryStorage.retrieveShadowRootBySandboxId(sandboxId);
            if (!shadowRoot) {
                return;
            }
            var sandbox = this._sandboxInMemoryStorage.retrieveSandboxBySandboxId(sandboxId);
            if (sandbox) {
                shadowRoot.removeChild(sandbox);
            }
            var styleElement = shadowRoot.getElementById(IFrameCreationStrategy.STYLE_HANDLE_PREFIX + sandboxId);
            if (styleElement) {
                shadowRoot.removeChild(styleElement);
            }
            if (shadowRoot._hostElementOfShadowRoot) {
                shadowRoot._hostElementOfShadowRoot.parentNode.removeChild(shadowRoot._hostElementOfShadowRoot);
            }
            this._sandboxInMemoryStorage.deleteShadowRoot(sandboxId);
        };
        IFrameCreationStrategy.prototype._buildCssString = function (cssSpec) {
            var styleRulesArray = [];
            for (var styleName in cssSpec) {
                if (cssSpec.hasOwnProperty(styleName)) {
                    styleRulesArray.push([styleName, cssSpec[styleName]].join(":"));
                }
            }
            return styleRulesArray.join(";").concat(";");
        };
        IFrameCreationStrategy.prototype._getParentPageElement = function (elementCssSelector) {
            var element = document.querySelector(elementCssSelector);
            if (!element) {
                throw new Error("StyleLibrary couldn't find the specified element.");
            }
            return element;
        };
        IFrameCreationStrategy.prototype._applyStyleSheetCSSRule = function (handle, styleSheetCSSRules) {
            var styleHandle = IFrameCreationStrategy.STYLE_HANDLE_PREFIX + handle;
            var styleSheet = this._createStyleSheet(handle, styleHandle);
            styleSheetCSSRules.forEach(function (styleSheetCSSRule) {
                styleSheet.insertRule(styleSheetCSSRule);
            });
        };
        IFrameCreationStrategy.prototype._createStyleSheet = function (handle, styleHandle) {
            var shadowRoot = this._sandboxInMemoryStorage.retrieveShadowRootBySandboxId(handle);
            var styleElement = document.createElement("style");
            styleElement.setAttribute("id", styleHandle);
            shadowRoot.appendChild(styleElement);
            return styleElement.sheet;
        };
        IFrameCreationStrategy.STYLE_HANDLE_PREFIX = "UBPStyle";
        IFrameCreationStrategy.SELECTORS_TO_QUERY = ["div:not(:empty)", "span:not(:empty)"];
        IFrameCreationStrategy.ELEMENT_TO_CREATE_AS_FALLBACK = ["div", "span"];
        return IFrameCreationStrategy;
    }());
    SandboxLibrary.IFrameCreationStrategy = IFrameCreationStrategy;
    var SandboxInMemoryStorage = (function () {
        function SandboxInMemoryStorage() {
            this._PROXY_URL_TO_CONTROLLER_PATH_REGEX = "%2F([a-z]*)(%3F|&)";
            this._SANDBOX_SELECTOR_TO_CONTROLLER_PATH_REGEX = "src\\*=([a-z]*)";
            this._currentShadowRootsMap = {};
            this._tabIdControllerPathToSandboxId = {};
            this._sandBoxIdToTabIdControllerPath = {};
        }
        SandboxInMemoryStorage.prototype.storeShadowRoot = function (shadowRoot, tabId, sandboxId, proxyUrl) {
            this._currentShadowRootsMap[sandboxId] = shadowRoot;
            var regexMatchResult = proxyUrl.match(this._PROXY_URL_TO_CONTROLLER_PATH_REGEX);
            if (!regexMatchResult ||
                regexMatchResult[1] === null || regexMatchResult[1] === undefined) {
                return;
            }
            var controllerPath = regexMatchResult[1];
            var tabIdControllerPathKey = this._createTabIdControllerPathKey(tabId, controllerPath);
            this._tabIdControllerPathToSandboxId[tabIdControllerPathKey] = sandboxId;
            this._sandBoxIdToTabIdControllerPath[sandboxId] = tabIdControllerPathKey;
        };
        SandboxInMemoryStorage.prototype.retrieveShadowRootBySandboxId = function (sandboxId) {
            return this._currentShadowRootsMap[sandboxId];
        };
        SandboxInMemoryStorage.prototype.retrieveShadowRootByTabIdSandboxSelector = function (tabId, sandboxSelector) {
            var sandboxId = this._getSandboxId(tabId, sandboxSelector);
            if (!sandboxId) {
                throw new Error("retrieveShadowRoot: SandboxId not found for tabId :" + tabId + " and sandboxSelector: " + sandboxSelector);
            }
            return this.retrieveShadowRootBySandboxId(sandboxId);
        };
        SandboxInMemoryStorage.prototype.retrieveSandboxBySandboxId = function (sandboxId) {
            var shadowRoot = this.retrieveShadowRootBySandboxId(sandboxId);
            if (shadowRoot) {
                return shadowRoot.getElementById(sandboxId);
            }
            else {
                return null;
            }
        };
        SandboxInMemoryStorage.prototype.retrieveSandboxByTabIdSandboxSelector = function (tabId, sandboxSelector) {
            var sandboxId = this._getSandboxId(tabId, sandboxSelector);
            if (!sandboxId) {
                throw new Error("retrieveSandbox: SandboxId not found for tabId :" + tabId + " and sandboxSelector: " + sandboxSelector);
            }
            return this.retrieveSandboxBySandboxId(sandboxId);
        };
        SandboxInMemoryStorage.prototype.deleteShadowRoot = function (sandboxId) {
            delete this._currentShadowRootsMap[sandboxId];
            var tabIdControllerPath = this._sandBoxIdToTabIdControllerPath[sandboxId];
            delete this._tabIdControllerPathToSandboxId[tabIdControllerPath];
            delete this._sandBoxIdToTabIdControllerPath[sandboxId];
        };
        SandboxInMemoryStorage.prototype._createTabIdControllerPathKey = function (tabId, controllerPath) {
            return tabId + "_" + controllerPath;
        };
        SandboxInMemoryStorage.prototype._getSandboxId = function (tabId, sandboxSelector) {
            var regexMatchResult = sandboxSelector.match(this._SANDBOX_SELECTOR_TO_CONTROLLER_PATH_REGEX);
            if (!regexMatchResult ||
                regexMatchResult[1] === null || regexMatchResult[1] === undefined) {
                return;
            }
            var controllerPath = regexMatchResult[1];
            var tabIdControllerPathKey = this._createTabIdControllerPathKey(tabId, controllerPath);
            return this._tabIdControllerPathToSandboxId[tabIdControllerPathKey];
        };
        return SandboxInMemoryStorage;
    }());
    SandboxLibrary.SandboxInMemoryStorage = SandboxInMemoryStorage;
    var MAX_SAFE_INTEGER = Number["MAX_SAFE_INTEGER"] || 9007199254740991;
    var MIN_SAFE_INTEGER = Number["MIN_SAFE_INTEGER"] || -9007199254740991;
    var USE_SIGN_BIT = (MAX_SAFE_INTEGER * -1) === MIN_SAFE_INTEGER;
    function randomInteger() {
        var randomInteger = Math.floor(Math.random() * MAX_SAFE_INTEGER);
        if (USE_SIGN_BIT) {
            var heads = Math.floor(Math.random() * 2);
            if (heads) {
                randomInteger *= -1;
            }
        }
        return randomInteger.toString();
    }
    SandboxLibrary.instrumentMessages = {};
    function appendQueryParams(url, params) {
        var sourceUrl = "", queryString = "", urlhash = "";
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                queryString += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(params[key]);
            }
        }
        if (url.indexOf('#') > 0) {
            var cl = url.indexOf('#');
            urlhash = url.substring(url.indexOf('#'), url.length);
        }
        else {
            urlhash = '';
            cl = url.length;
        }
        sourceUrl = url.substring(0, cl);
        if (sourceUrl.indexOf("?") > -1) {
            if (sourceUrl.charAt(sourceUrl.length - 1) === "&" || sourceUrl.charAt(sourceUrl.length - 1) === "?") {
                queryString = queryString.slice(1);
            }
        }
        else {
            queryString = "?" + queryString.slice(1);
        }
        return sourceUrl + queryString + urlhash;
    }
    SandboxLibrary.appendQueryParams = appendQueryParams;
})(SandboxLibrary || (SandboxLibrary = {}));
//# sourceMappingURL=data:application/json;base64,
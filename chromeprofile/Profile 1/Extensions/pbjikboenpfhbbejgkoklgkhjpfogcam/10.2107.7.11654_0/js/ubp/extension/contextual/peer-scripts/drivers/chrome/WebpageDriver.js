var ChromeWebpagePeerDriver;
(function (ChromeWebpagePeerDriver) {
    ChromeWebpagePeerDriver.ExtensionNamespace = typeof browser != 'undefined' ? browser : chrome;
    ChromeWebpagePeerDriver.library = new Instrumentor.WebpageLibrary(document);
    function getTime() {
        return (window.performance) ? window.performance.now() : Date.now();
    }
    ChromeWebpagePeerDriver.getTime = getTime;
    function createNewResponse(messageId) {
        return {
            msgId: messageId,
            error: undefined,
            payload: undefined,
            performanceTiming: {
                requestStart: undefined,
                requestEnd: undefined
            }
        };
    }
    function handleMessage(request, sender, sendResponse) {
        if (request && this.library.canHandle(request.type)) {
            var response = createNewResponse(request.msgId);
            try {
                response.performanceTiming.requestStart = this.getTime();
                response.payload = this.library.handle(request.type, request.payload);
                response.performanceTiming.requestEnd = this.getTime();
            }
            catch (e) {
                response.error = (e && typeof e.toString === "function") ? e.toString() : "Error object in ChromeInstrumentWebpagePeerDriver is undefined or has no toString method";
            }
            finally {
                if (response.payload && typeof response.payload.then === "function") {
                    response.payload.then(function (result) {
                        response.payload = result;
                        sendResponse(response);
                    }).catch(function (error) {
                        response.payload = null;
                        response.error = error.toString();
                        sendResponse(response);
                    });
                    return true;
                }
                else {
                    sendResponse(response);
                }
            }
        }
    }
    ChromeWebpagePeerDriver.handleMessage = handleMessage;
    function bootstrap() {
        if (!this.initialized) {
            this.initialized = true;
            ChromeWebpagePeerDriver.ExtensionNamespace.runtime.onMessage.addListener(this.handleMessage.bind(this));
            window.addEventListener("message", function () {
            });
        }
    }
    ChromeWebpagePeerDriver.bootstrap = bootstrap;
    ChromeWebpagePeerDriver.bootstrap.call(ChromeWebpagePeerDriver);
})(ChromeWebpagePeerDriver || (ChromeWebpagePeerDriver = {}));
//# sourceMappingURL=data:application/json;base64,
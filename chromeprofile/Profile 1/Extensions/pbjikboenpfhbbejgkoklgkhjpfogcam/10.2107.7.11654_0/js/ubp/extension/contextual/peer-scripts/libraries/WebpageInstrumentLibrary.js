var Instrumentor;
(function (Instrumentor) {
    var WebpageLibrary = (function () {
        function WebpageLibrary(_htmlDocument) {
            this._htmlDocument = _htmlDocument;
            this._apiMap = {
                "UBPWebpageInstrumentWebpage": this.handleInstrumentWebpage.bind(this)
            };
            this._instrumentors = {
                query: this.query.bind(this),
                getText: this.getText.bind(this),
                click: this.click.bind(this),
                isVisible: this.isVisible.bind(this),
                getAttributes: this.getAttributes.bind(this),
                scrollIntoView: this.scrollIntoView.bind(this),
                containsClass: this.containsClass.bind(this),
                input: this.input.bind(this),
                keydown: this.keydown.bind(this)
            };
        }
        WebpageLibrary.prototype.handle = function (requestType, payload) {
            if (!this.canHandle(requestType)) {
                throw new Error("WebpageLibrary: Cannot handle " + requestType + ".");
            }
            return this._apiMap[requestType](payload);
        };
        WebpageLibrary.prototype.canHandle = function (requestType) {
            return typeof this._apiMap[requestType] === "function";
        };
        WebpageLibrary.prototype.handleInstrumentWebpage = function (payload) {
            var _this = this;
            return Promise.resolve().then(function () {
                if (!payload ||
                    !payload.action ||
                    !payload.action.type ||
                    typeof _this._instrumentors[payload.action.type] !== "function") {
                    throw new Error("Invalid action to instrument.");
                }
                return _this._instrumentors[payload.action.type](payload.action);
            });
        };
        WebpageLibrary.prototype.query = function (action) {
            return this._querySelectorAll(action.selector).map(function (element) {
                return {
                    id: element.id,
                    class: element.className
                };
            });
        };
        WebpageLibrary.prototype.getText = function (action) {
            return this._querySelectorAll(action.selector).map(function (element) {
                return {
                    id: element.id,
                    class: element.className,
                    text: element.innerText
                };
            });
        };
        WebpageLibrary.prototype.click = function (action) {
            return this._htmlDocument.querySelector(action.selector).click();
        };
        WebpageLibrary.prototype.isVisible = function (action) {
            var elm = this._htmlDocument.querySelector(action.selector);
            if (!elm) {
                return false;
            }
            var rect = elm.getBoundingClientRect();
            return (rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || this._htmlDocument.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || this._htmlDocument.documentElement.clientWidth));
        };
        WebpageLibrary.prototype.getAttributes = function (action) {
            return Array.prototype.map.call(this._htmlDocument.querySelectorAll(action.selector), function (element) {
                return element.getAttribute(action.attributeName);
            });
        };
        WebpageLibrary.prototype.scrollIntoView = function (action) {
            var element = this._getElement(action.selector);
            return element.scrollIntoView();
        };
        WebpageLibrary.prototype.containsClass = function (action) {
            var element = this._getElement(action.selector);
            return element.classList.contains(action.className);
        };
        WebpageLibrary.prototype.input = function (action) {
            var element = this._getElement(action.selector);
            var EventConstruct = Event;
            var event = new EventConstruct('input', {
                'bubbles': true,
                'cancelable': true
            });
            element.value = action.value;
            element.dispatchEvent(event);
        };
        WebpageLibrary.prototype.keydown = function (action) {
            var element = this._getElement(action.selector);
            var KeyboardEventConstruct = KeyboardEvent;
            element.dispatchEvent(new KeyboardEventConstruct('keydown', { 'keyCode': action.keyCode }));
        };
        WebpageLibrary.prototype._getElement = function (selector) {
            var element = this._htmlDocument.querySelector(selector);
            if (!element) {
                throw 'ElementNotFound with selector ' + selector;
            }
            return element;
        };
        WebpageLibrary.prototype._querySelectorAll = function (selector) {
            return Array.prototype.slice.call(this._htmlDocument.querySelectorAll(selector));
        };
        return WebpageLibrary;
    }());
    Instrumentor.WebpageLibrary = WebpageLibrary;
})(Instrumentor || (Instrumentor = {}));
//# sourceMappingURL=data:application/json;base64,
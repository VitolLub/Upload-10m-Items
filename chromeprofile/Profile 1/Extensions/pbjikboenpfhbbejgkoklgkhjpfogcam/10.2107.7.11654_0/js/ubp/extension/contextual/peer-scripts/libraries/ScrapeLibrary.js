var ScrapeLibrary;
(function (ScrapeLibrary) {
    var Scraper = (function () {
        function Scraper(htmlDocument) {
            this.htmlDocument = htmlDocument;
            this._apiMap = {};
            this._apiMap[Scraper.SCRAPER_SCRAPE_API] = this._handleScraperSpec.bind(this);
            this._apiMap[Scraper.LISTENER_SCRAPE_API] = this._handleListenerSpec.bind(this);
            this.evaluators = {};
            this.evaluators[Scraper.CSS] = new CssEvaluator();
            this.evaluators[Scraper.XPATH] = new XPathEvaluator();
            this.evaluators[Scraper.URLJSREGEX] = new UrlJsRegexEvaluator();
            this.evaluators[Scraper.METATAG] = new MetatagEvaluator(new CssEvaluator());
            this.evaluators[Scraper.TEXTJSREGEX] = new TextJsRegexEvaluator();
            this.evaluators[Scraper.XPATH2] = new Xpath2Evaluator();
            this._targetExpressionTypeEvaluators = {};
            this._targetExpressionTypeEvaluators[Scraper.XPATH_TARGET_EXPRESSION] = new XpathTargetExpressionEvaluator();
            this._targetedSearchAlgorithmMap = {};
            this._targetedSearchAlgorithmMap[Scraper.REVERSE_DFS] = new ReverseDFSSearchAlgorithm();
        }
        Scraper.prototype.canHandle = function (requestType) {
            return !!(this._apiMap[requestType]);
        };
        Scraper.prototype.handle = function (requestType, payload) {
            if (!this.canHandle(requestType)) {
                throw new Error("ScrapeLibrary: Cannot handle requestType with value: " + JSON.stringify(requestType) + ".");
            }
            return this._apiMap[requestType](payload);
        };
        Scraper.prototype._handleListenerSpec = function (specification) {
            _validateListenerSpec(specification);
            switch (specification.expressionSpecification.expressionSpecificationType) {
                case GlobalDeclarations.ExpressionSpecificationType.TargetedSearch:
                    return this._evaluateTargetedListenerSpec(specification);
                case GlobalDeclarations.ExpressionSpecificationType.Flat:
                    return this._evaluateFlatListenerSpec(specification);
                default:
                    throw new Error("Unsupported expression specification type");
            }
        };
        Scraper.prototype._evaluateFlatListenerSpec = function (specification) {
            var _this = this;
            var scrapeResults = specification.scrapers.map(function (scraper) {
                try {
                    return {
                        result: _this._handleScraperSpec(scraper)
                    };
                }
                catch (err) {
                    return {
                        error: err
                    };
                }
            });
            return {
                listenerResultType: GlobalDeclarations.ExpressionSpecificationType.Flat,
                listenerId: specification.listenerId,
                results: scrapeResults
            };
        };
        Scraper.prototype._evaluateTargetedListenerSpec = function (specification) {
            _validateTargetedSearchExpression(specification.expressionSpecification);
            var targetExpression = specification.expressionSpecification.targetExpression;
            var searchAlgorithm = specification.expressionSpecification.searchAlgorithm;
            var maxTargetElements = specification.expressionSpecification.maxElements;
            var targetElements = this._targetExpressionTypeEvaluators[specification.expressionSpecification.targetExpressionType]
                .evaluate(this.htmlDocument, targetExpression);
            targetElements = targetElements.slice(0, maxTargetElements);
            if (this._targetedSearchAlgorithmMap[searchAlgorithm]) {
                return this._targetedSearchAlgorithmMap[searchAlgorithm].search(this.htmlDocument, specification, targetElements, this.evaluators);
            }
            else {
                throw new Error("Unsupported search algorithm found");
            }
        };
        Scraper.prototype._handleScraperSpec = function (specification) {
            _validateScraper(specification);
            var evaluator = this.evaluators[specification.scraperType];
            if (!evaluator) {
                throw new Error("No evaluator installed for scraper type: " + specification.scraperType);
            }
            return evaluator.execute(this.htmlDocument, specification.scraper, specification.contentType, specification.attributeSource);
        };
        Scraper.SCRAPER_SCRAPE_API = "UBPScraperScrape";
        Scraper.LISTENER_SCRAPE_API = "UBPScraperListeners";
        Scraper.CSS = "Css";
        Scraper.XPATH = "Xpath";
        Scraper.URLJSREGEX = "UrlJsRegex";
        Scraper.METATAG = "Metatag";
        Scraper.TEXTJSREGEX = "TextJsRegex";
        Scraper.XPATH2 = "Xpath2";
        Scraper.PAGELOADING = "PageLoading";
        Scraper.PAGELOADED = "PageLoaded";
        Scraper.TARGETED_SEARCH = "TargetedSearch";
        Scraper.XPATH_TARGET_EXPRESSION = "Xpath";
        Scraper.REVERSE_DFS = "ReverseDFS";
        return Scraper;
    }());
    ScrapeLibrary.Scraper = Scraper;
    var Xpath2Evaluator = (function () {
        function Xpath2Evaluator() {
        }
        Xpath2Evaluator.prototype.execute = function (htmlDocument, expression, contentType, attributeSource) {
            var nodes = Xpath2Library.evaluate(expression);
            return nodes.map(function (n) { return ({ contentType: contentType, contentBody: n.textContent }); });
        };
        return Xpath2Evaluator;
    }());
    var CssEvaluator = (function () {
        function CssEvaluator() {
        }
        CssEvaluator.prototype.execute = function (htmlDocument, expression, contentType, attributeSource) {
            var contents = [];
            var result = htmlDocument.querySelectorAll(expression);
            if (!result) {
                return contents;
            }
            for (var i = 0; i < result.length; i++) {
                var element = result[i];
                if (!element) {
                    continue;
                }
                var contentValue = _getAttributeSource(attributeSource, element);
                if (contentValue) {
                    contents.push({ contentType: contentType, contentBody: contentValue });
                }
            }
            return contents;
        };
        return CssEvaluator;
    }());
    var UrlJsRegexEvaluator = (function () {
        function UrlJsRegexEvaluator() {
        }
        UrlJsRegexEvaluator.prototype.execute = function (htmlDocument, expression, contentType) {
            var contents = [];
            var patterns = expression.split("\n");
            if (patterns.length !== 2) {
                throw new Error("UrlJsRegex expression must have exactly two lines: " + patterns);
            }
            var matchPattern = patterns[0];
            var contentPattern = patterns[1];
            var regex = new RegExp(matchPattern);
            var url = htmlDocument.URL;
            var matches = url.match(regex);
            if (!matches || !matches[0]) {
                return contents;
            }
            var contentValue = url.replace(regex, contentPattern);
            if (contentValue) {
                contents.push({ contentType: contentType, contentBody: contentValue });
            }
            return contents;
        };
        return UrlJsRegexEvaluator;
    }());
    var XPathEvaluator = (function () {
        function XPathEvaluator() {
        }
        XPathEvaluator.prototype.execute = function (htmlDocument, expression, contentType, attributeSource, contextNode) {
            var contents = [];
            if (!htmlDocument.evaluate) {
                throw new Error("htmlDocument does not define evaluate()");
            }
            var result = htmlDocument.evaluate(expression, (contextNode ? contextNode : htmlDocument), null, XPathResultTypes.ANY_TYPE, null);
            var resultType = result.resultType;
            var node;
            switch (resultType) {
                case XPathResultTypes.NUMBER_TYPE:
                    if (typeof result.numberValue !== "undefined") {
                        contents.push({ contentType: contentType, contentBody: result.numberValue });
                    }
                    break;
                case XPathResultTypes.STRING_TYPE:
                    if (result.stringValue) {
                        contents.push({ contentType: contentType, contentBody: result.stringValue });
                    }
                    break;
                case XPathResultTypes.BOOLEAN_TYPE:
                    if (typeof result.booleanValue !== "undefined") {
                        contents.push({ contentType: contentType, contentBody: result.booleanValue });
                    }
                    break;
                case XPathResultTypes.UNORDERED_NODE_ITERATOR_TYPE:
                case XPathResultTypes.ORDERED_NODE_ITERATOR_TYPE:
                    var iterationNumber = 0;
                    while (iterationNumber < XPathEvaluator.MAX_XPATH_ITERATIONS) {
                        iterationNumber++;
                        node = result.iterateNext();
                        if (!node) {
                            break;
                        }
                        var contentValue = _getAttributeSource(attributeSource, node);
                        if (contentValue) {
                            contents.push({ contentType: contentType, contentBody: contentValue });
                        }
                    }
                    break;
                case XPathResultTypes.UNORDERED_NODE_SNAPSHOT_TYPE:
                case XPathResultTypes.ORDERED_NODE_SNAPSHOT_TYPE:
                    for (var i = 0; i < result.snapshotLength; i++) {
                        node = result.snapshotItem(i);
                        if (!node) {
                            continue;
                        }
                        var contentValue = _getAttributeSource(attributeSource, node);
                        if (contentValue) {
                            contents.push({ contentType: contentType, contentBody: contentValue });
                        }
                    }
                    break;
                case XPathResultTypes.ANY_UNORDERED_NODE_TYPE:
                case XPathResultTypes.FIRST_ORDERED_NODE_TYPE:
                    node = result.singleNodeValue;
                    if (!node) {
                        break;
                    }
                    var contentValue = _getAttributeSource(attributeSource, node);
                    if (contentValue) {
                        contents.push({ contentType: contentType, contentBody: contentValue });
                    }
                    break;
                default:
                    throw new Error("Unexpected resultType found: " + resultType);
            }
            return contents;
        };
        XPathEvaluator.MAX_XPATH_ITERATIONS = 32;
        return XPathEvaluator;
    }());
    var MetatagEvaluator = (function () {
        function MetatagEvaluator(cssEvaluator) {
            this.cssEvaluator = cssEvaluator;
        }
        MetatagEvaluator.prototype.execute = function (htmlDocument, serializedScraper) {
            var scraper = JSON.parse(serializedScraper);
            var requiredProperties = scraper.requiredProperties;
            var scrapableProperties = scraper.scrapableProperties;
            var contents = [];
            if (!requiredProperties || !scrapableProperties || !scrapableProperties.length) {
                throw new Error("Metatag scraper: null or empty parameters: " + [requiredProperties, scrapableProperties]);
            }
            var requiredPropertiesMatch = true;
            for (var i = 0; i < requiredProperties.length; i++) {
                var requiredPropery = requiredProperties[i];
                var content = this.cssEvaluator.execute(htmlDocument, "meta[property=\"" + requiredPropery.name + "\"]", "Keywords", "content")
                    .shift();
                if (!content || content.contentBody !== requiredPropery.value) {
                    requiredPropertiesMatch = false;
                    contents.push({ contentType: "requiredPropertiesMatch", contentBody: "false" });
                    break;
                }
            }
            if (requiredPropertiesMatch)
                contents.push({ contentType: "requiredPropertiesMatch", contentBody: "true" });
            for (var i = 0; i < scrapableProperties.length; i++) {
                var scrapablePropery = scrapableProperties[i];
                var content = this.cssEvaluator.execute(htmlDocument, "meta[property=\"" + scrapablePropery.name + "\"]", scrapablePropery.contentType, "content")
                    .shift();
                if (content) {
                    contents.push(content);
                }
            }
            return contents;
        };
        return MetatagEvaluator;
    }());
    var TextJsRegexEvaluator = (function () {
        function TextJsRegexEvaluator() {
        }
        TextJsRegexEvaluator.prototype.execute = function (htmlDocument, expression, contentType, attributeSource, contextNode) {
            var components = expression.split(TextJsRegexEvaluator._DELIM);
            if (components.length < 2) {
                throw new Error("TextJsRegex must contain a match pattern and a replacement pattern: " + JSON.stringify(components));
            }
            if (components.length > 2) {
                components[1] = components.slice(1).join(TextJsRegexEvaluator._DELIM);
            }
            var matchPattern = components[0];
            var replacementPattern = components[1];
            var regex = new RegExp(matchPattern);
            var textNodes = retrieveXpathNodes(htmlDocument, "descendant-or-self::*/text()", (contextNode ? contextNode : null));
            textNodes = textNodes.slice(0, Math.min(textNodes.length, TextJsRegexEvaluator.MAX_NODES));
            var results = [];
            textNodes.forEach(function (textNode) {
                if (textNode && textNode.textContent) {
                    var textContent = textNode.textContent;
                    textContent = textContent.substring(0, Math.min(textContent.length, TextJsRegexEvaluator.MAX_TEXT_LENGTH));
                    var regexResult = textContent.match(regex);
                    if (regexResult != null && regexResult[0]) {
                        var contentValue = regexResult[0].replace(regex, replacementPattern);
                        results.push({ contentType: contentType, contentBody: contentValue });
                    }
                }
            });
            return results;
        };
        TextJsRegexEvaluator._DELIM = "^*";
        TextJsRegexEvaluator.MAX_NODES = 500;
        TextJsRegexEvaluator.MAX_TEXT_LENGTH = 500;
        return TextJsRegexEvaluator;
    }());
    var XPathResultTypes;
    (function (XPathResultTypes) {
        XPathResultTypes[XPathResultTypes["ANY_TYPE"] = 0] = "ANY_TYPE";
        XPathResultTypes[XPathResultTypes["NUMBER_TYPE"] = 1] = "NUMBER_TYPE";
        XPathResultTypes[XPathResultTypes["STRING_TYPE"] = 2] = "STRING_TYPE";
        XPathResultTypes[XPathResultTypes["BOOLEAN_TYPE"] = 3] = "BOOLEAN_TYPE";
        XPathResultTypes[XPathResultTypes["UNORDERED_NODE_ITERATOR_TYPE"] = 4] = "UNORDERED_NODE_ITERATOR_TYPE";
        XPathResultTypes[XPathResultTypes["ORDERED_NODE_ITERATOR_TYPE"] = 5] = "ORDERED_NODE_ITERATOR_TYPE";
        XPathResultTypes[XPathResultTypes["UNORDERED_NODE_SNAPSHOT_TYPE"] = 6] = "UNORDERED_NODE_SNAPSHOT_TYPE";
        XPathResultTypes[XPathResultTypes["ORDERED_NODE_SNAPSHOT_TYPE"] = 7] = "ORDERED_NODE_SNAPSHOT_TYPE";
        XPathResultTypes[XPathResultTypes["ANY_UNORDERED_NODE_TYPE"] = 8] = "ANY_UNORDERED_NODE_TYPE";
        XPathResultTypes[XPathResultTypes["FIRST_ORDERED_NODE_TYPE"] = 9] = "FIRST_ORDERED_NODE_TYPE";
    })(XPathResultTypes || (XPathResultTypes = {}));
    function retrieveXpathNodes(htmlDocument, expression, contextNode) {
        if (!htmlDocument.evaluate) {
            throw new Error("htmlDocument does not define evaluate()");
        }
        var result = htmlDocument.evaluate(expression, (contextNode ? contextNode : htmlDocument), null, XPathResultTypes.ORDERED_NODE_SNAPSHOT_TYPE, null);
        var nodes = [];
        for (var i = 0; i < result.snapshotLength; i++) {
            nodes.push(result.snapshotItem(i));
        }
        return nodes;
    }
    var XpathTargetExpressionEvaluator = (function () {
        function XpathTargetExpressionEvaluator() {
        }
        XpathTargetExpressionEvaluator.prototype.evaluate = function (htmlDocument, targetExpression) {
            return retrieveXpathNodes(htmlDocument, targetExpression, null);
        };
        return XpathTargetExpressionEvaluator;
    }());
    var ReverseDFSSearchAlgorithm = (function () {
        function ReverseDFSSearchAlgorithm() {
        }
        ReverseDFSSearchAlgorithm.prototype.search = function (htmlDocument, specification, targetElements, evaluators) {
            var _this = this;
            var allResults = targetElements.map(function (targetElement) {
                return _this._searchSingleElement(htmlDocument, specification, targetElement, evaluators);
            }).filter(function (targetedScrapeResult) {
                return (!_isEmptyObject(targetedScrapeResult.elementScrapeResult));
            });
            return {
                listenerResultType: GlobalDeclarations.ExpressionSpecificationType.TargetedSearch,
                listenerId: specification.listenerId,
                results: allResults
            };
        };
        ReverseDFSSearchAlgorithm.prototype._searchSingleElement = function (htmlDocument, specification, targetElement, evaluators) {
            var searchDepth = specification.expressionSpecification.searchDepth;
            var scrapers = specification.scrapers;
            var currSearchDepth = 0;
            var scraperIDToResults = {};
            var currentElem = targetElement;
            while (currSearchDepth < searchDepth && !!currentElem) {
                for (var i = 0; i < scrapers.length; i++) {
                    try {
                        var currentScraper = scrapers[i];
                        if (scraperIDToResults[currentScraper.scraperSignature]
                            && scraperIDToResults[currentScraper.scraperSignature].length >= ReverseDFSSearchAlgorithm.MAX_CONTENTS_PER_SCRAPER) {
                            continue;
                        }
                        var currScrapedContents = [];
                        switch (currentScraper.scraperType) {
                            case Scraper.XPATH:
                            case Scraper.TEXTJSREGEX:
                                currScrapedContents = evaluators[currentScraper.scraperType].execute(htmlDocument, currentScraper.scraper, currentScraper.contentType, currentScraper.attributeSource, currentElem);
                                break;
                            default:
                                throw new Error("Invalid scraper type found for targeted search algorithm: " + currentScraper.scraperType);
                        }
                        var prevScrapeResults = scraperIDToResults[currentScraper.scraperSignature];
                        if (prevScrapeResults && prevScrapeResults.length > 0) {
                            scraperIDToResults[currentScraper.scraperSignature] = prevScrapeResults.concat(currScrapedContents)
                                .slice(0, ReverseDFSSearchAlgorithm.MAX_CONTENTS_PER_SCRAPER);
                        }
                        else if (currScrapedContents && currScrapedContents.length > 0) {
                            scraperIDToResults[currentScraper.scraperSignature] = currScrapedContents.slice(0, ReverseDFSSearchAlgorithm.MAX_CONTENTS_PER_SCRAPER);
                        }
                    }
                    catch (err) {
                    }
                }
                currSearchDepth++;
                currentElem = currentElem.parentElement;
            }
            var targetScrapeResult = {};
            Object.keys(scraperIDToResults).map(function (key, index) {
                targetScrapeResult[key] = {
                    result: scraperIDToResults[key]
                };
            });
            return {
                elementScrapeResult: targetScrapeResult
            };
        };
        ReverseDFSSearchAlgorithm.MAX_CONTENTS_PER_SCRAPER = 1;
        return ReverseDFSSearchAlgorithm;
    }());
    function _validateScraper(specification) {
        if (!specification) {
            throw new Error("Scraper specification must be specified: " + specification);
        }
        if (!specification.contentType) {
            throw new Error("Scraper specification must have a content type");
        }
        if (!specification.scraperType) {
            throw new Error("Scraper specification must have an scraper type");
        }
        if (!specification.scraper) {
            throw new Error("Scraper specification must have an scraper expression");
        }
    }
    function _validateListenerSpec(specification) {
        if (!specification) {
            throw new Error("Listener specification must be specified: " + specification);
        }
        if (!specification.expressionType) {
            throw new Error("Listener specification must contain the expression type: " + specification);
        }
        if (specification.expression === null || specification.expression === undefined) {
            throw new Error("Listener specification expression must not be null or undefined: " + specification);
        }
        if (!specification.eventType) {
            throw new Error("Listener specification must contain event type: " + specification);
        }
        if (!specification.listenerId) {
            throw new Error("Listener specification must contain a listener ID: " + specification);
        }
        if (!specification.scrapers || specification.scrapers.length < 1) {
            throw new Error("Listener specification must contain a non-empty scrapers array: " + specification);
        }
        if (!specification.expressionSpecification) {
            throw new Error("Listener specification must contain an expression specification: " + specification);
        }
        var scraperSignaturesMap = {};
        specification.scrapers.forEach(function (scraper) {
            _validateScraper(scraper);
            if (!scraper.scraperSignature) {
                throw new Error("Scraper signatures must be passed as part of the Listeners API: " + scraper);
            }
            if (scraperSignaturesMap[scraper.scraperSignature]) {
                throw new Error("Should not have duplicate scraper signatures in a listener's scraper set");
            }
            scraperSignaturesMap[scraper.scraperSignature] = scraper.scraperSignature;
        });
    }
    function _validateTargetedSearchExpression(expressionSpecification) {
        if (!expressionSpecification) {
            throw new Error("Targeted search listener must have a listener expression: " + expressionSpecification);
        }
        if (!expressionSpecification.targetExpression) {
            throw new Error("Targeted search listener must have a listener expression with target expression: " + expressionSpecification);
        }
        if (!expressionSpecification.targetExpressionType) {
            throw new Error("Targeted search listener must have a target expression type: " + expressionSpecification);
        }
        if (!expressionSpecification.searchDepth || expressionSpecification.searchDepth < 0) {
            throw new Error("Targeted search listener must have a non-negative search depth: " + expressionSpecification);
        }
        if (!expressionSpecification.searchAlgorithm) {
            throw new Error("Targeted search listener must have a search algorithm: " + expressionSpecification);
        }
        if (!expressionSpecification.maxElements || expressionSpecification.maxElements < 0) {
            throw new Error("Targeted search listener must have a non-negative max element count: " + expressionSpecification);
        }
    }
    function _isEmptyObject(obj) {
        return Object.keys(obj).length === 0 && obj.constructor === Object;
    }
    function _getAttributeSource(attributeSource, element) {
        var attributeValue;
        if (attributeSource) {
            attributeValue = element.getAttribute(attributeSource);
            return (attributeValue ? attributeValue : element[attributeSource]);
        }
        else {
            return element.textContent;
        }
    }
})(ScrapeLibrary || (ScrapeLibrary = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NyYXBlTGlicmFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy91YnAvZXh0ZW5zaW9uL2NvbnRleHR1YWwvcGVlci1zY3JpcHRzL2xpYnJhcmllcy9TY3JhcGVMaWJyYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQVUsYUFBYSxDQXMrQnRCO0FBdCtCRCxXQUFVLGFBQWE7SUFzQ25CO1FBOERJLGlCQUFvQixZQUFxQjtZQUFyQixpQkFBWSxHQUFaLFlBQVksQ0FBUztZQUVyQyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBR2hGLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7WUFDbEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUN0RCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7WUFDaEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLFlBQVksRUFBRSxDQUFDLENBQUM7WUFDNUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FB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QixDQUFDLGVBQWUsRUFBRTtZQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxHQUFHLHVCQUF1QixDQUFDLENBQUM7U0FDeEc7UUFDRCxJQUFJLENBQUMsdUJBQXVCLENBQUMsV0FBVyxJQUFJLHVCQUF1QixDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUU7WUFDakYsTUFBTSxJQUFJLEtBQUssQ0FBQyx1RUFBdUUsR0FBRyx1QkFBdUIsQ0FBQyxDQUFDO1NBQ3RIO0lBQ0wsQ0FBQztJQUdELFNBQVMsY0FBYyxDQUFDLEdBQVE7UUFDNUIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLFdBQVcsS0FBSyxNQUFNLENBQUE7SUFDdEUsQ0FBQztJQUlELFNBQVMsbUJBQW1CLENBQUMsZUFBdUIsRUFBRSxPQUFvQjtRQUN0RSxJQUFJLGNBQXNCLENBQUM7UUFDM0IsSUFBSSxlQUFlLEVBQUU7WUFDakIsY0FBYyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFdkQsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztTQUN2RTthQUFNO1lBQ0gsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQzlCO0lBQ0wsQ0FBQztBQUNMLENBQUMsRUF0K0JTLGFBQWEsS0FBYixhQUFhLFFBcytCdEIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgU2NyYXBlTGlicmFyeSB7XG4gICAgLyoqXG4gICAgICogQSBjb21wb25lbnQgdGhhdCBzY3JhcGVzIGEgbGlzdCBvZiBDb250ZW50IGZyb20gYW4gSFRNTERvY3VtZW50IGFjY29yZGluZyB0aGUgcnVsZXNcbiAgICAgKiBkaWN0YXRlZCBieSBhIElTY3JhcGVyU3BlY2lmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIEEgU2NyYXBlciBpcyB1c2VkIGluIHRoZSBmb2xsb3dpbmcgbWFubmVyOlxuICAgICAqXG4gICAgICogPGNvZGU+XG4gICAgICogLy8gY3JlYXRlIGEgc2NyYXBlclxuICAgICAqIFNjcmFwZXIgc2NyYXBlciA9IG5ldyBTY3JhcGVMaWJyYXJ5LlNjcmFwZXIoKTtcbiAgICAgKlxuICAgICAqIC8vIGNyZWF0ZSB0aGUgc3BlY2lmaWNhdGlvbiB0aGF0IGRlc2NyaWJlcyBob3cgdG8gc2NyYXBlIGNvbnRlbnRcbiAgICAgKiAgdmFyIHNwZWNpZmljYXRpb24gPSB7XG4gICAgICogICAgICBjb250ZW50VHlwZSA6IFwiUHJpY2VcIiwgICAgICAvLyBzY3JhcGUgcHJpY2UgQ29udGVudFxuICAgICAqICAgICAgc2NyYXBlclR5cGUgOiBcIkNzc1wiLCAgICAgICAgLy8gc2NyYXBlIHVzaW5nIGFuIHhwYXRoIGV4cHJlc3Npb25cbiAgICAgKiAgICAgIHNjcmFwZXIgICAgIDogXCIjc29tZURpdklkXCIsIC8vIHNjcmFwZSB1c2luZyB0aGlzIENzcyBzZWxlY3RvclxuICAgICAqICB9O1xuICAgICAqXG4gICAgICogIC8vIHBlcmZvcm0gdGhlIHNjcmFwaW5nIC0gbm90aWNlIHRoYXQgdGhlIEhUTUxEb2N1bWVudCBpcyBzcGVjaWZpZWQgYXMgdGhlIGZpcnN0IHBhcmFtZXRlclxuICAgICAqICB2YXIgY29udGVudHMgPSBzY3JhcGVyLnNjcmFwZSh3aW5kb3cuZG9jdW1lbnQsIHNwZWNpZmljYXRpb24pO1xuICAgICAqXG4gICAgICogIC8vIGluc3BlY3QgdGhlIHJlc3VsdHNcbiAgICAgKiAgY29uc29sZS5sb2coY29udGVudHNbaV0pOyAvLyB0aGlzIHdpbGwgbG9nIHRoZSBwcmljZSBzY3JhcGVkIGZyb21cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgaXRoIG1hdGNoaW5nIG5vZGUgaW4gdGhlIEhUTUxEb2N1bWVudFxuICAgICAqIDwvY29kZT5cbiAgICAgKlxuICAgICAqIFhYWDogcGVlciBzY3JpcHRzIGNhbm5vdCB1c2UgdGhlIG1vZHVsZSBsb2FkZXIgYXMgdGhleSBhcmUgdG8gYmUgaW5qZWN0ZWRcbiAgICAgKiBvbnRvIHRoZSBwYWdlIGRpcmVjdGx5IGFuZCB0aHVzIG5lZWQgdG8gbGlnaHQtd2VpZ2h0LlxuICAgICAqXG4gICAgICogWFhYLTI6IFRoaXMgbGlicmFyeSBuZWVkcyB0byBiZSBpbmplY3RlZCBvbnRvIHRoZSBwYWdlIGJlZm9yZSBTY3JhcGVEcml2ZXJcbiAgICAgKiBhcyB0aGUgZHJpdmVyIG5lZWRzIHRoZSBsaWJyYXJ5IGJlZm9yZSBib290c3RyYXBwaW5nIGJ1dCB0aGVyZSBpcyBub1xuICAgICAqIG1vZHVsZSBsb2FkZXIgYXZhaWxhYmxlIGluIGNvbnRlbnQgc2NyaXB0IGNvbnRleHRcbiAgICAgKlxuICAgICAqIFhYWC0zOiBXaGVuIHVzaW5nIFhwYXRoIGV2YWx1YXRvcnMsIGNvbnN1bWVycyBzaG91bGQgcHJvdmlkZSBhbiBleHByZXNzaW9uXG4gICAgICogdGhhdCByZXN1bHRzIGluIGEgbm9kZShzKSwgcmF0aGVyIHRoYW4gdGV4dC4gVGhlIFNjcmFwZXIgTGlicmFyeSB3aWxsIGVpdGhlclxuICAgICAqIGV4dHJhY3QgdGhlIGF0dHJpYnV0ZSB0ZXh0IG9yIGlubmVyIHRleHQgZnJvbSB0aGUgbm9kZSBiYXNlZCBvbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvciBhYnNlbmNlIG9mIGF0dHJpYnV0ZVNvdXJjZSBpbiBzY3JhcGVyIHNwZWNpZmljYXRpb24uXG4gICAgICovXG4gICAgZXhwb3J0IGNsYXNzIFNjcmFwZXIgaW1wbGVtZW50cyBJQ29udGV4dHVhbFBlZXJMaWJyYXJ5IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIGEgbWFwcGluZyBvZiByZXF1ZXN0VHlwZSB0byBBUEkuXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIF9hcGlNYXA6e1xuICAgICAgICAgICAgW3JlcXVlc3RUeXBlOnN0cmluZ106RnVuY3Rpb25cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlc2UgZXZhbHVhdG9ycyBhcmUgaW52b2tlZCB3aGVuIFNjcmFwZXIuZXhlY3V0ZSBpcyBjYWxsZWRcbiAgICAgICAgICogd2l0aCBhIGNvcnJlc3BvbmRpbmcgc2NyYXBlclR5cGVcbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgZXZhbHVhdG9yczp7XG4gICAgICAgICAgICBbc2NyYXBlclR5cGU6c3RyaW5nXTogSUV2YWx1YXRvcjtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcGluZyBvZiB0YXJnZXQgZXhwcmVzc2lvbiB0eXBlcyB0byBJVGFyZ2V0RXhwcmVzc2lvbkV2YWx1YXRvcnMgdGhhdCBjYW4gXG4gICAgICAgICAqIHByb2Nlc3MgZXhwcmVzc2lvbnMgb2YgdGhlIHNwZWNpZmllZCB0eXBlLlxuICAgICAgICAgKi9cbiAgICAgICAgcHJpdmF0ZSBfdGFyZ2V0RXhwcmVzc2lvblR5cGVFdmFsdWF0b3JzOiB7XG4gICAgICAgICAgICBbdGFyZ2V0RXhwcmVzc2lvblR5cGU6IHN0cmluZ106IElUYXJnZXRFeHByZXNzaW9uRXZhbHVhdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyBhIG1hcHBpbmcgb2YgdGFyZ2V0IHNlYXJjaCBhbGdvcml0aG0gdHlwZSB0byBmdW5jdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgX3RhcmdldGVkU2VhcmNoQWxnb3JpdGhtTWFwOiB7XG4gICAgICAgICAgICBbc2VhcmNoQWxnb3JpdGhtOiBzdHJpbmddOiBJVGFyZ2V0ZWRTZWFyY2hBbGdvcml0aG07XG4gICAgICAgIH1cblxuICAgICAgICAvKiBTdGF0aWMgdmFyaWFibGVzIGZvciByZXVzZWQgbmFtZXMgKi9cbiAgICAgICAgLy9QcmltYXJ5IFNjcmFwZXIgQVBJIGhhbmRsZXJzXG4gICAgICAgIHN0YXRpYyBTQ1JBUEVSX1NDUkFQRV9BUEkgPSBcIlVCUFNjcmFwZXJTY3JhcGVcIjtcbiAgICAgICAgc3RhdGljIExJU1RFTkVSX1NDUkFQRV9BUEkgPSBcIlVCUFNjcmFwZXJMaXN0ZW5lcnNcIjtcblxuICAgICAgICAvL1NjcmFwZXIgZXhwcmVzc2lvbiB0eXBlc1xuICAgICAgICBzdGF0aWMgQ1NTID0gXCJDc3NcIjtcbiAgICAgICAgc3RhdGljIFhQQVRIID0gXCJYcGF0aFwiO1xuICAgICAgICBzdGF0aWMgVVJMSlNSRUdFWCA9IFwiVXJsSnNSZWdleFwiO1xuICAgICAgICBzdGF0aWMgTUVUQVRBRyA9IFwiTWV0YXRhZ1wiO1xuICAgICAgICBzdGF0aWMgVEVYVEpTUkVHRVggPSBcIlRleHRKc1JlZ2V4XCI7XG4gICAgICAgIHN0YXRpYyBYUEFUSDIgPSBcIlhwYXRoMlwiO1xuXG4gICAgICAgIC8vTGlzdGVuZXIgZXhwcmVzc2lvbiB0eXBlc1xuICAgICAgICBzdGF0aWMgUEFHRUxPQURJTkcgPSBcIlBhZ2VMb2FkaW5nXCI7XG4gICAgICAgIHN0YXRpYyBQQUdFTE9BREVEID0gXCJQYWdlTG9hZGVkXCI7XG4gICAgICAgIHN0YXRpYyBUQVJHRVRFRF9TRUFSQ0ggPSBcIlRhcmdldGVkU2VhcmNoXCI7XG5cbiAgICAgICAgLy9UYXJnZXQgZXhwcmVzc2lvbiB0eXBlc1xuICAgICAgICBzdGF0aWMgWFBBVEhfVEFSR0VUX0VYUFJFU1NJT04gPSBcIlhwYXRoXCI7XG5cbiAgICAgICAgLy9UYXJnZXQgc2VhcmNoIGFsZ29yaXRobXNcbiAgICAgICAgc3RhdGljIFJFVkVSU0VfREZTID0gXCJSZXZlcnNlREZTXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWxpemUgd2l0aCB0aGUgZ2l2ZW4gSFRNTERvY3VtZW50IGFuZCBpbnN0YW50aWF0ZVxuICAgICAgICAgKiBhbGwgc2NyYXBlciBldmFsdXJhdG9ycyB0byB3b3JrIG9uIGRpZmZlcmVudFxuICAgICAgICAgKiBzY3JhcGVyIHR5cGVzXG4gICAgICAgICAqIEBwYXJhbSBodG1sRG9jdW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHRtbERvY3VtZW50OkRvY3VtZW50KSB7XG4gICAgICAgICAgICAvKiBTZXQgdXAgdGhlIHByaW1hcnkgQVBJIGhhbmRsZXIgbWFwICovXG4gICAgICAgICAgICB0aGlzLl9hcGlNYXAgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuX2FwaU1hcFtTY3JhcGVyLlNDUkFQRVJfU0NSQVBFX0FQSV0gPSB0aGlzLl9oYW5kbGVTY3JhcGVyU3BlYy5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fYXBpTWFwW1NjcmFwZXIuTElTVEVORVJfU0NSQVBFX0FQSV0gPSB0aGlzLl9oYW5kbGVMaXN0ZW5lclNwZWMuYmluZCh0aGlzKTtcblxuICAgICAgICAgICAgLyogU2V0IHVwIHRoZSBFdmFsdWF0b3IgbWFwICovXG4gICAgICAgICAgICB0aGlzLmV2YWx1YXRvcnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZXZhbHVhdG9yc1tTY3JhcGVyLkNTU10gPSBuZXcgQ3NzRXZhbHVhdG9yKCk7XG4gICAgICAgICAgICB0aGlzLmV2YWx1YXRvcnNbU2NyYXBlci5YUEFUSF0gPSBuZXcgWFBhdGhFdmFsdWF0b3IoKTtcbiAgICAgICAgICAgIHRoaXMuZXZhbHVhdG9yc1tTY3JhcGVyLlVSTEpTUkVHRVhdID0gbmV3IFVybEpzUmVnZXhFdmFsdWF0b3IoKTtcbiAgICAgICAgICAgIHRoaXMuZXZhbHVhdG9yc1tTY3JhcGVyLk1FVEFUQUddID0gbmV3IE1ldGF0YWdFdmFsdWF0b3IobmV3IENzc0V2YWx1YXRvcigpKTtcbiAgICAgICAgICAgIHRoaXMuZXZhbHVhdG9yc1tTY3JhcGVyLlRFWFRKU1JFR0VYXSA9IG5ldyBUZXh0SnNSZWdleEV2YWx1YXRvcigpO1xuICAgICAgICAgICAgdGhpcy5ldmFsdWF0b3JzW1NjcmFwZXIuWFBBVEgyXSA9IG5ldyBYcGF0aDJFdmFsdWF0b3IoKTtcblxuICAgICAgICAgICAgLyogU2V0IHVwIHRoZSB0YXJnZXQgZXhwcmVzc2lvbiB0eXBlIGV2YWx1YXRpb24gbWFwICovXG4gICAgICAgICAgICB0aGlzLl90YXJnZXRFeHByZXNzaW9uVHlwZUV2YWx1YXRvcnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldEV4cHJlc3Npb25UeXBlRXZhbHVhdG9yc1tTY3JhcGVyLlhQQVRIX1RBUkdFVF9FWFBSRVNTSU9OXSA9ICBuZXcgWHBhdGhUYXJnZXRFeHByZXNzaW9uRXZhbHVhdG9yKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3RhcmdldGVkU2VhcmNoQWxnb3JpdGhtTWFwID0ge307XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRlZFNlYXJjaEFsZ29yaXRobU1hcFtTY3JhcGVyLlJFVkVSU0VfREZTXSA9IG5ldyBSZXZlcnNlREZTU2VhcmNoQWxnb3JpdGhtKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBhIGZ1bmN0aW9uIGluIHRoZSBBUEkgbWFwIHRvIGhhbmRsZSB0aGlzIHJlcXVlc3QgYmFzZWQgb24gdGhlIHJlcXVlc3RUeXBlXG4gICAgICAgICAqIHBhcmFtZXRlci5cbiAgICAgICAgICogQHBhcmFtIHJlcXVlc3RUeXBlICAgICAgdGhlIHJlcXVlc3QgdHlwZVxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gICAgICAgd2hldGhlciB0aGlzIGxpYnJhcnkgY2FuIGhhbmRsZSB0aGUgcmVxdWVzdCBvZiB0aGUgZ2l2ZW4gcmVxdWVzdCB0eXBlLlxuICAgICAgICAgKi9cbiAgICAgICAgY2FuSGFuZGxlKHJlcXVlc3RUeXBlOnN0cmluZyk6Ym9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gISEodGhpcy5fYXBpTWFwW3JlcXVlc3RUeXBlXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUGFyc2VzIHRoZSBtZXNzYWdlIGZyb20gdGhlIDEtQkEgYW5kIGludm9rZXMgdGhlIGFwcHJvcHJpYXRlIG1ldGhvZCxcbiAgICAgICAgICogYW5kIHJldHVybnMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbWV0aG9kLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdFR5cGVcbiAgICAgICAgICogQHBhcmFtIHBheWxvYWRcbiAgICAgICAgICogQHJldHVybnMgeyp9XG4gICAgICAgICAqL1xuICAgICAgICBoYW5kbGUocmVxdWVzdFR5cGU6c3RyaW5nLCBwYXlsb2FkOmFueSk6YW55IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jYW5IYW5kbGUocmVxdWVzdFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2NyYXBlTGlicmFyeTogQ2Fubm90IGhhbmRsZSByZXF1ZXN0VHlwZSB3aXRoIHZhbHVlOiBcIiArIEpTT04uc3RyaW5naWZ5KHJlcXVlc3RUeXBlKSArIFwiLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hcGlNYXBbcmVxdWVzdFR5cGVdKHBheWxvYWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgYSByZXF1ZXN0IHRvIHNjcmFwZSB0aGUgcGFnZSBiYXNlZCBvbiBhIExpc3RlbmVyIHNwZWNpZmljYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSBzcGVjaWZpY2F0aW9uIHRoZSB7QGxpbmsgSUxpc3RlbmVyU3BlY2lmaWNhdGlvbn1cbiAgICAgICAgICogQHJldHVybnMgYW4ge0BsaW5rIElMaXN0ZW5lclJlc3VsdH0gY2FwdHVyaW5nIHRoZSBvdXRwdXQgb2YgdGhlIGxpc3RlbmVyXG4gICAgICAgICAqL1xuICAgICAgICBfaGFuZGxlTGlzdGVuZXJTcGVjKHNwZWNpZmljYXRpb246IElMaXN0ZW5lclNwZWNpZmljYXRpb24pOiBJTGlzdGVuZXJSZXN1bHQge1xuICAgICAgICAgICAgX3ZhbGlkYXRlTGlzdGVuZXJTcGVjKHNwZWNpZmljYXRpb24pO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQmFzZWQgb24gdGhlIGV4cHJlc3Npb24gc3BlY2lmaWNhdGlvbiB0eXBlLCBkZXRlcm1pbmUgaG93IHRoZSBsaXN0ZW5lciBzcGVjaWZpY2F0aW9uXG4gICAgICAgICAgICAgKiBhbmQgaXRzIHNjcmFwZXJzIHNob3VsZCBiZSBhcHBsaWVkLiBUaGlzIHdpbGwgYWxzbyBkZXRlcm1pbmUgdGhlIHN0cnVjdHVyZSBvZiB0aGUgXG4gICAgICAgICAgICAgKiByZXN1bHQgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzd2l0Y2goc3BlY2lmaWNhdGlvbi5leHByZXNzaW9uU3BlY2lmaWNhdGlvbi5leHByZXNzaW9uU3BlY2lmaWNhdGlvblR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEdsb2JhbERlY2xhcmF0aW9ucy5FeHByZXNzaW9uU3BlY2lmaWNhdGlvblR5cGUuVGFyZ2V0ZWRTZWFyY2g6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ldmFsdWF0ZVRhcmdldGVkTGlzdGVuZXJTcGVjKDxJVGFyZ2V0ZWRTZWFyY2hMaXN0ZW5lclNwZWNpZmljYXRpb24+IHNwZWNpZmljYXRpb24pO1xuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsRGVjbGFyYXRpb25zLkV4cHJlc3Npb25TcGVjaWZpY2F0aW9uVHlwZS5GbGF0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZhbHVhdGVGbGF0TGlzdGVuZXJTcGVjKHNwZWNpZmljYXRpb24pO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGV4cHJlc3Npb24gc3BlY2lmaWNhdGlvbiB0eXBlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV2YWx1YXRlcyBhIGxpc3RlbmVyIHNwZWNpZmljYXRpb24gYXMgYSBmbGF0IGxpc3RlbmVyIHNwZWNpZmljYXRpb24sIG1lYW5pbmcgZWFjaCBzY3JhcGVyIGluIHRoZVxuICAgICAgICAgKiBsaXN0ZW5lcidzIHNjcmFwZXIgbGlzdCBpcyBhcHBsaWVkIGluZGVwZW5kZW50bHkgdG8gcHJvZHVjZSB0aGUgZmluYWwgcmVzdWx0LiBFYWNoIHNjcmFwZXIgd2lsbCBcbiAgICAgICAgICogZ2VuZXJhdGUgYW4gYXJyYXkgb2Ygc2NyYXBlIHJlc3VsdHMgaW4gb3JkZXI7IGlmIG5vIHNjcmFwZSByZXN1bHRzIHdlcmUgZm91bmQgZm9yIHRoYXQgcGFydGljdWxhclxuICAgICAgICAgKiBzY3JhcGVyLCBhbiBlbXB0eSBsaXN0IHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICAgICAqL1xuICAgICAgICBfZXZhbHVhdGVGbGF0TGlzdGVuZXJTcGVjKHNwZWNpZmljYXRpb246IElMaXN0ZW5lclNwZWNpZmljYXRpb24pOiBJRmxhdExpc3RlbmVyUmVzdWx0IHtcbiAgICAgICAgICAgIHZhciBzY3JhcGVSZXN1bHRzID0gc3BlY2lmaWNhdGlvbi5zY3JhcGVycy5tYXAoKHNjcmFwZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPElTY3JhcGVyUmVzdWx0PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHRoaXMuX2hhbmRsZVNjcmFwZXJTcGVjKHNjcmFwZXIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxJU2NyYXBlclJlc3VsdD4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIDxJRmxhdExpc3RlbmVyUmVzdWx0PiB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJSZXN1bHRUeXBlOiBHbG9iYWxEZWNsYXJhdGlvbnMuRXhwcmVzc2lvblNwZWNpZmljYXRpb25UeXBlLkZsYXQsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJJZDogc3BlY2lmaWNhdGlvbi5saXN0ZW5lcklkLFxuICAgICAgICAgICAgICAgIHJlc3VsdHM6IHNjcmFwZVJlc3VsdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFdmFsdWF0ZXMgYSBsaXN0ZW5lciBzcGVjaWZpY2F0aW9uIGFzIGEgdGFyZ2V0ZWQgc2VhcmNoIGxpc3RlbmVyIHNwZWNpZmljYXRpb24sIHdoZXJlIGEgdGFyZ2V0XG4gICAgICAgICAqIGV4cHJlc3Npb24gaXMgdXNlZCB0byBpZGVudGlmeSB0YXJnZXQgZWxlbWVudHMgb24gdGhlIEhUTUwgZG9jdW1lbnQuIEZvciBlYWNoIGluc3RhbmNlIG9mIFxuICAgICAgICAgKiB0aGUgdGFyZ2V0IGVsZW1lbnQgZm91bmQsIGEgc2VhcmNoIGFsZ29yaXRobSBpcyBzcGVjaWZpZWQgaW4gdGhlIGxpc3RlbmVyIHNwZWNpZmljYXRpb24gc28gdGhhdCB0aGUgXG4gICAgICAgICAqIHNjcmFwZXJzIGFyZSBhcHBsaWVkIGFjY29yZGluZyB0byB0aGUgc2VhcmNoIGFsZ29yaXRobSBcImFyb3VuZFwiIHRoZSB0YXJnZXQgZWxlbWVudC4gXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAcGFyYW0gc3BlY2lmaWNhdGlvbiB0aGUgbGlzdGVuZXIgc3BlY2lmaWNhdGlvbiBvZiB0eXBlIFRhcmdldGVkU2VhcmNoXG4gICAgICAgICAqIEByZXR1cm5zIGEgdGFyZ2V0ZWQgc2VhcmNoIHJlc3VsdC4gXG4gICAgICAgICAqL1xuICAgICAgICBfZXZhbHVhdGVUYXJnZXRlZExpc3RlbmVyU3BlYyhzcGVjaWZpY2F0aW9uOiBJVGFyZ2V0ZWRTZWFyY2hMaXN0ZW5lclNwZWNpZmljYXRpb24pOiBJVGFyZ2V0ZWRTZWFyY2hMaXN0ZW5lclJlc3VsdCB7XG4gICAgICAgICAgICBfdmFsaWRhdGVUYXJnZXRlZFNlYXJjaEV4cHJlc3Npb24oc3BlY2lmaWNhdGlvbi5leHByZXNzaW9uU3BlY2lmaWNhdGlvbik7XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIHRhcmdldEV4cHJlc3Npb246IHN0cmluZyA9IHNwZWNpZmljYXRpb24uZXhwcmVzc2lvblNwZWNpZmljYXRpb24udGFyZ2V0RXhwcmVzc2lvbjtcbiAgICAgICAgICAgIHZhciBzZWFyY2hBbGdvcml0aG06IHN0cmluZyA9IHNwZWNpZmljYXRpb24uZXhwcmVzc2lvblNwZWNpZmljYXRpb24uc2VhcmNoQWxnb3JpdGhtO1xuICAgICAgICAgICAgdmFyIG1heFRhcmdldEVsZW1lbnRzOiBudW1iZXIgPSBzcGVjaWZpY2F0aW9uLmV4cHJlc3Npb25TcGVjaWZpY2F0aW9uLm1heEVsZW1lbnRzO1xuXG4gICAgICAgICAgICAvL0ZpbmQgYWxsIEhUTUwgZWxlbWVudHMgdGhhdCBtYXRjaCB0aGUgdGFyZ2V0IGVsZW1lbnQgc3BlY2lmaWNhdGlvbiBmcm9tIHRoZSBET00gcm9vdFxuICAgICAgICAgICAgdmFyIHRhcmdldEVsZW1lbnRzOiBBcnJheTxIVE1MRWxlbWVudD4gPSB0aGlzLl90YXJnZXRFeHByZXNzaW9uVHlwZUV2YWx1YXRvcnNbc3BlY2lmaWNhdGlvbi5leHByZXNzaW9uU3BlY2lmaWNhdGlvbi50YXJnZXRFeHByZXNzaW9uVHlwZV1cbiAgICAgICAgICAgICAgICAuZXZhbHVhdGUodGhpcy5odG1sRG9jdW1lbnQsIHRhcmdldEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgdGFyZ2V0RWxlbWVudHMgPSB0YXJnZXRFbGVtZW50cy5zbGljZSgwLCBtYXhUYXJnZXRFbGVtZW50cyk7XG5cbiAgICAgICAgICAgIC8vRGVsZWdhdGUgcmVzdWx0IHRvIHRoZSBzcGVjaWZpZWQgc2VhcmNoIGFsZ29yaXRobVxuICAgICAgICAgICAgaWYgKHRoaXMuX3RhcmdldGVkU2VhcmNoQWxnb3JpdGhtTWFwW3NlYXJjaEFsZ29yaXRobV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0ZWRTZWFyY2hBbGdvcml0aG1NYXBbc2VhcmNoQWxnb3JpdGhtXS5zZWFyY2godGhpcy5odG1sRG9jdW1lbnQsIHNwZWNpZmljYXRpb24sIHRhcmdldEVsZW1lbnRzLCB0aGlzLmV2YWx1YXRvcnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBzZWFyY2ggYWxnb3JpdGhtIGZvdW5kXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEF0dGVtcHRzIHRvIHNjcmFwZSBDb250ZW50IGZyb20gdGhlIHNwZWNpZmllZCBIVE1MRG9jdW1lbnQgYWNjb3JkaW5nXG4gICAgICAgICAqIHRvIHRoZSBzcGVjaWZpZWQge0BsaW5rIElTY3JhcGVyU3BlY2lmaWNhdGlvbn0uXG4gICAgICAgICAqIEBwYXJhbSBzcGVjaWZpY2F0aW9uXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fVxuICAgICAgICAgKiAgICAgICAgICBBIGxpc3Qgb2YgYWxsIENvbnRlbnQgc2NyYXBlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZFxuICAgICAgICAgKiAgICAgICAgICBJU2NyYXBlclNwZWNpZmljYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBfaGFuZGxlU2NyYXBlclNwZWMoc3BlY2lmaWNhdGlvbjpJU2NyYXBlclNwZWNpZmljYXRpb24pOkFycmF5PElTY3JhcGVDb250ZW50PiB7XG4gICAgICAgICAgICAvL3ZhbGlkYXRlIHRoZSBzcGVjaWZpY2F0aW9uXG4gICAgICAgICAgICBfdmFsaWRhdGVTY3JhcGVyKHNwZWNpZmljYXRpb24pO1xuXG4gICAgICAgICAgICAvLyBzZWxlY3QgdGhlIGFwcHJvcHJpYXRlIGV4cHJlc3Npb24gZXZhbHVhdG9yXG4gICAgICAgICAgICB2YXIgZXZhbHVhdG9yID0gdGhpcy5ldmFsdWF0b3JzW3NwZWNpZmljYXRpb24uc2NyYXBlclR5cGVdO1xuICAgICAgICAgICAgaWYgKCFldmFsdWF0b3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBldmFsdWF0b3IgaW5zdGFsbGVkIGZvciBzY3JhcGVyIHR5cGU6IFwiICsgc3BlY2lmaWNhdGlvbi5zY3JhcGVyVHlwZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uXG4gICAgICAgICAgICByZXR1cm4gZXZhbHVhdG9yLmV4ZWN1dGUoXG4gICAgICAgICAgICAgICAgdGhpcy5odG1sRG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgc3BlY2lmaWNhdGlvbi5zY3JhcGVyLFxuICAgICAgICAgICAgICAgIHNwZWNpZmljYXRpb24uY29udGVudFR5cGUsXG4gICAgICAgICAgICAgICAgc3BlY2lmaWNhdGlvbi5hdHRyaWJ1dGVTb3VyY2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgRXZhbHVhdG9yIGludGVyZmFjZSBkZWZpbmVzIGhvdyBTY3JhcGVyIHNob3VsZCBpbnRlcmFjdCB3aXRoXG4gICAgICogaXRzIGludGVybmFsIGV2YWx1YXRvcnNcbiAgICAgKi9cbiAgICBpbnRlcmZhY2UgSUV2YWx1YXRvciB7XG4gICAgICAgIGV4ZWN1dGUoaHRtbERvY3VtZW50OkRvY3VtZW50LFxuICAgICAgICAgICAgICAgIHNjcmFwZXI6c3RyaW5nLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOnN0cmluZyxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVTb3VyY2U/OnN0cmluZyxcbiAgICAgICAgICAgICAgICBjb250ZXh0Tm9kZT86IEhUTUxFbGVtZW50KTogQXJyYXk8SVNjcmFwZUNvbnRlbnQ+O1xuICAgIH1cblxuICAgIGNsYXNzIFhwYXRoMkV2YWx1YXRvciBpbXBsZW1lbnRzIElFdmFsdWF0b3Ige1xuICAgICAgICBleGVjdXRlKGh0bWxEb2N1bWVudDpEb2N1bWVudCxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOnN0cmluZyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTpzdHJpbmcsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlU291cmNlPzpzdHJpbmcpOkFycmF5PElTY3JhcGVDb250ZW50PiB7XG4gICAgICAgICAgICB2YXIgbm9kZXM6Tm9kZVtdID0gWHBhdGgyTGlicmFyeS5ldmFsdWF0ZShleHByZXNzaW9uKTtcbiAgICAgICAgICAgIHJldHVybiBub2Rlcy5tYXAobiA9PiA8SVNjcmFwZUNvbnRlbnQ+eyBjb250ZW50VHlwZTogY29udGVudFR5cGUsIGNvbnRlbnRCb2R5OiBuLnRleHRDb250ZW50fSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV2YWx1YXRlcyB0aGUgQ3NzIHNjcmFwZXIgZXhwcmVzc2lvbiBhZ2FpbnN0IHRoZSBzcGVjaWZpZWQgSFRNTERvY3VtZW50LlxuICAgICAqIEFsbCBtYXRjaGluZyBDb250ZW50IGlzIHJldHVybmVkIGluIGxpc3QgZm9ybS5cbiAgICAgKlxuICAgICAqIEEgQ3NzIHNjcmFwZXIgZXhwcmVzc2lvbiBpcyBhIENTUyBTZWxlY3Rvci4gU2VlXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGxcbiAgICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBDU1MgU2VsZWN0b3JzLlxuICAgICAqL1xuICAgIGNsYXNzIENzc0V2YWx1YXRvciBpbXBsZW1lbnRzIElFdmFsdWF0b3Ige1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IFNjcmFwZXIjZXhlY3V0ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGh0bWxEb2N1bWVudFxuICAgICAgICAgKiBAcGFyYW0gZXhwcmVzc2lvblxuICAgICAgICAgKiBAcGFyYW0gY29udGVudFR5cGVcbiAgICAgICAgICogQHBhcmFtIGF0dHJpYnV0ZVNvdXJjZVxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICBleGVjdXRlKGh0bWxEb2N1bWVudDpEb2N1bWVudCxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOnN0cmluZyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTpzdHJpbmcsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlU291cmNlPzpzdHJpbmcpOkFycmF5PElTY3JhcGVDb250ZW50PiB7XG4gICAgICAgICAgICB2YXIgY29udGVudHM6QXJyYXk8SVNjcmFwZUNvbnRlbnQ+ID0gW107XG5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gaHRtbERvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZXhwcmVzc2lvbik7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHJlc3VsdFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVW5sZXNzIGF0dHJpYnV0ZVNvdXJjZSBpcyBzcGVjaWZpZWQsIGRlZmF1bHQgdG8gcmV0dXJuIGVsZW1lbnQncyB0ZXh0Q29udGVudCB2YWx1ZVxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50VmFsdWUgPSBfZ2V0QXR0cmlidXRlU291cmNlKGF0dHJpYnV0ZVNvdXJjZSwgPEhUTUxFbGVtZW50PmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudHMucHVzaCh7Y29udGVudFR5cGU6IGNvbnRlbnRUeXBlLCBjb250ZW50Qm9keTogY29udGVudFZhbHVlfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29udGVudHM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmFsdWF0ZXMgdGhlIFVybEpzUmVnZXggc2NyYXBlciBleHByZXNzaW9uIGFnYWluc3QgdGhlIFVSTCBvZiB0aGVcbiAgICAgKiBzcGVjaWZpZWQgSFRNTERvY3VtZW50LiBBIGxpc3QgY29udGFpbmluZyBhIHNpbmdsZSBDb250ZW50IG9iamVjdFxuICAgICAqIGlzIHJldHVybmVkIGlmIG5vbi10cml2aWFsIENvbnRlbnQgbWF0Y2hpbmcgdGhlIElTY3JhcGVyU3BlY2lmaWNhdGlvbiBjb3VsZCBiZSBmb3VuZDtcbiAgICAgKiBhbiBlbXB0eSBsaXN0IGlzIHJldHVybmVkIG90aGVyd2lzZS5cbiAgICAgKlxuICAgICAqIEEgVXJsSnNSZWdleCBleHByZXNzaW9uIGlzIGNvbXBvc2VkIG9mIHR3byBjb21wb25lbnRzLCBvbmUgcGVyIGxpbmU6XG4gICAgICpcbiAgICAgKiA8Y29kZT5cbiAgICAgKiAgICAgTWF0Y2hQYXR0ZXJuXFxuXG4gICAgICogICAgIENvbnRlbnRQYXR0ZXJuXG4gICAgICogPC9jb2RlPlxuICAgICAqXG4gICAgICogVGhlIE1hdGNoUGF0dGVybiBtdXN0IG1hdGNoIHRoZSBVUkwgZm9yIENvbnRlbnQgdG8gYmUgc2NyYXBlZC4gVGhlXG4gICAgICogQ29udGVudFBhdHRlcm4gaXMgYSBzdWJzdGl0dXRpb24gcGF0dGVybiBmb3IgdGhlIFVSTC4gVGhlIENvbnRlbnRQYXR0ZXJuXG4gICAgICogbWF5IHVzZSBudW1iZXJlZCBiYWNrcmVmZXJlbmNlcyB0byB0aGUgZ3JvdXBpbmdzIGluIHRoZSBNYXRjaFBhdHRlcm5cbiAgICAgKiByZXN1bHQuXG4gICAgICovXG4gICAgY2xhc3MgVXJsSnNSZWdleEV2YWx1YXRvciBpbXBsZW1lbnRzIElFdmFsdWF0b3Ige1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IFNjcmFwZXIjZXhlY3V0ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGh0bWxEb2N1bWVudFxuICAgICAgICAgKiBAcGFyYW0gZXhwcmVzc2lvblxuICAgICAgICAgKiBAcGFyYW0gY29udGVudFR5cGVcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgZXhlY3V0ZShodG1sRG9jdW1lbnQ6RG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjpzdHJpbmcsXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6c3RyaW5nKTpBcnJheTxJU2NyYXBlQ29udGVudD4ge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRzOkFycmF5PElTY3JhcGVDb250ZW50PiA9IFtdO1xuXG4gICAgICAgICAgICAvLyBwYXJzZSB0aGUgcGF0dGVybnMgb3V0IG9mIHRoZSBleHByZXNzaW9uXG4gICAgICAgICAgICB2YXIgcGF0dGVybnMgPSBleHByZXNzaW9uLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICAgICAgaWYgKHBhdHRlcm5zLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVybEpzUmVnZXggZXhwcmVzc2lvbiBtdXN0IGhhdmUgZXhhY3RseSB0d28gbGluZXM6IFwiICsgcGF0dGVybnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hdGNoUGF0dGVybiA9IHBhdHRlcm5zWzBdO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRQYXR0ZXJuID0gcGF0dGVybnNbMV07XG4gICAgICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKG1hdGNoUGF0dGVybik7XG5cbiAgICAgICAgICAgIC8vIHJldHJpZXZlIHRoZSB1cmxcbiAgICAgICAgICAgIHZhciB1cmwgPSBodG1sRG9jdW1lbnQuVVJMO1xuXG4gICAgICAgICAgICAvLyBlbnN1cmUgdGhlIHJlZ2V4IG1hdGNoZXMgdGhlIHVybFxuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSB1cmwubWF0Y2gocmVnZXgpO1xuICAgICAgICAgICAgaWYgKCFtYXRjaGVzIHx8ICFtYXRjaGVzWzBdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb21wdXRlIHRoZSBjb250ZW50IHZhbHVlXG4gICAgICAgICAgICB2YXIgY29udGVudFZhbHVlID0gdXJsLnJlcGxhY2UocmVnZXgsIGNvbnRlbnRQYXR0ZXJuKTtcblxuICAgICAgICAgICAgaWYgKGNvbnRlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRzLnB1c2goe2NvbnRlbnRUeXBlOiBjb250ZW50VHlwZSwgY29udGVudEJvZHk6IGNvbnRlbnRWYWx1ZX0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29udGVudHM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmFsdWF0ZXMgdGhlIFhwYXRoIHNjcmFwZXIgZXhwcmVzc2lvbiBhZ2FpbnN0IHRoZSBzcGVjaWZpZWRcbiAgICAgKiBIVE1MRG9jdW1lbnQuIEFsbCBtYXRjaGluZyBDb250ZW50IGlzIHNjcmFwZWQgYW5kIHJldHVybmVkIGluIGxpc3QgZm9ybS5cbiAgICAgKlxuICAgICAqIEEgWHBhdGggc2NyYXBlciBleHByZXNzaW9uIGlzIGFuIFhQYXRoIHNlbGVjdG9yLiBTZWVcbiAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0ludHJvZHVjdGlvbl90b191c2luZ19YUGF0aF9pbl9KYXZhU2NyaXB0XG4gICAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgWFBhdGguXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgU2NyYXBlciNzY3JhcGUuIE5vdGUgdGhhdCBjb250ZW50IGNvbnN0cmFpbnRzXG4gICAgICogYXJlIG5vdCBjaGVja2VkIGJ5IHRoaXMgbWV0aG9kLiBUaGV5IGFyZSBjaGVja2VkIGJ5IFNjcmFwZXIjc2NyYXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGh0bWxEb2N1bWVudFxuICAgICAqICAgICAgICAgICAgVGhlIEhUTUxEb2N1bWVudCB0byBhdHRlbXB0IHRvIHNjcmFwZSBDb250ZW50IGZyb20gKHRoZVxuICAgICAqICAgICAgICAgICAgSFRNTERvY3VtZW50J3MgVVJMIHdpbGwgYmUgc2NyYXBlZCkuIFNlZSBodHRwczovL1xuICAgICAqICAgICAgICAgICAgZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MRG9jdW1lbnQgZm9yIG1vcmVcbiAgICAgKiAgICAgICAgICAgIGluZm9ybWF0aW9uIGFib3V0IEhUTUxEb2N1bWVudHMuXG4gICAgICogQHBhcmFtIGV4cHJlc3Npb25cbiAgICAgKiAgICAgICAgICAgIFRoZSBYcGF0aCBleHByZXNzaW9uIHRoYXQgZGVzY3JpYmVzIGhvdyB0byBzY3JhcGVcbiAgICAgKiAgICAgICAgICAgIENvbnRlbnQuIFRoZSByZXN1bHQgd2lsbCBiZSBldmFsdWF0ZWQgYWNjb3JkaW5nIHRvIHRoZSB4cGF0aCByZXN1bHQgdHlwZS5cbiAgICAgKiBAcGFyYW0gY29udGVudFR5cGVcbiAgICAgKiAgICAgICAgICAgIFRoZSBleHBlY3RlZCBjb250ZW50IHR5cGUgb2YgdGhlIHNjcmFwZWQgY29udGVudC5cbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlU291cmNlXG4gICAgICogICAgICAgICAgICBJZiBzcGVjaWZpZWQsIHdlIHBpY2sgdGhlIGNvbnRlbnQgaW5zaWRlIHRoZSBnaXZlbiBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIGNvbnRleHROb2RlICAgXG4gICAgICogICAgICAgICAgICBJZiBzcGVjaWZpZWQsIHdlIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIHN0YXJ0aW5nIGZyb20gdGhlIGNvbnRleHQgbm9kZSBcbiAgICAgKiAgICAgICAgICAgIHJhdGhlciB0aGFuIHRoZSBkb2N1bWVudCdzIHJvb3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIEFuIGFycmF5IG9mIHRleHRDb250ZW50IG9yIGF0dHJpYnV0ZSB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBleHByZXNzaW9uXG4gICAgICogICAgICAgICBhbmQgYXR0cmlidXRlU291cmNlOyBhbiBlbXB0eSBsaXN0IGlmIHRoZXJlIGlzIG5vIHN1Y2ggY29udGVudC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2RvY3VtZW50LmV2YWx1YXRlXG4gICAgICovXG4gICAgY2xhc3MgWFBhdGhFdmFsdWF0b3IgaW1wbGVtZW50cyBJRXZhbHVhdG9yIHtcblxuICAgICAgICBzdGF0aWMgTUFYX1hQQVRIX0lURVJBVElPTlM6bnVtYmVyID0gMzI7XG5cbiAgICAgICAgZXhlY3V0ZShodG1sRG9jdW1lbnQ6RG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjpzdHJpbmcsXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6c3RyaW5nLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVNvdXJjZT86c3RyaW5nLFxuICAgICAgICAgICAgICAgIGNvbnRleHROb2RlPzogSFRNTEVsZW1lbnQpOkFycmF5PElTY3JhcGVDb250ZW50PiB7XG4gICAgICAgICAgICB2YXIgY29udGVudHM6QXJyYXk8SVNjcmFwZUNvbnRlbnQ+ID0gW107XG5cbiAgICAgICAgICAgIC8vIFJldHVybiBjb250ZW50cyBpZiBodG1sRG9jdW1lbnQgZG9lcyBub3QgZGVmaW5lIGV2YWx1YXRlKClcbiAgICAgICAgICAgIGlmICghaHRtbERvY3VtZW50LmV2YWx1YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaHRtbERvY3VtZW50IGRvZXMgbm90IGRlZmluZSBldmFsdWF0ZSgpXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBldmFsdWF0ZSB4cGF0aFxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGh0bWxEb2N1bWVudC5ldmFsdWF0ZShleHByZXNzaW9uLCAoY29udGV4dE5vZGUgPyBjb250ZXh0Tm9kZSA6IGh0bWxEb2N1bWVudCksIG51bGwsIFhQYXRoUmVzdWx0VHlwZXMuQU5ZX1RZUEUsIG51bGwpO1xuXG4gICAgICAgICAgICAvLyBpZGVudGlmeSB3aGF0IGtpbmQgb2YgcmVzdWx0IHdlIGV2YWx1YXRlZCB0b1xuICAgICAgICAgICAgdmFyIHJlc3VsdFR5cGUgPSByZXN1bHQucmVzdWx0VHlwZTtcblxuICAgICAgICAgICAgLy8gcGFyc2UgeHBhdGggcmVzdWx0IGFjY29yZGluZyB0byB0eXBlIG9mIGV2YWx1YXRpb25cbiAgICAgICAgICAgIHZhciBub2RlO1xuICAgICAgICAgICAgc3dpdGNoIChyZXN1bHRUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBYUGF0aFJlc3VsdFR5cGVzLk5VTUJFUl9UWVBFOlxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdC5udW1iZXJWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMucHVzaCh7Y29udGVudFR5cGU6IGNvbnRlbnRUeXBlLCBjb250ZW50Qm9keTogcmVzdWx0Lm51bWJlclZhbHVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBYUGF0aFJlc3VsdFR5cGVzLlNUUklOR19UWVBFOlxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0cmluZ1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cy5wdXNoKHtjb250ZW50VHlwZTogY29udGVudFR5cGUsIGNvbnRlbnRCb2R5OiByZXN1bHQuc3RyaW5nVmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFhQYXRoUmVzdWx0VHlwZXMuQk9PTEVBTl9UWVBFOlxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdC5ib29sZWFuVmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzLnB1c2goe2NvbnRlbnRUeXBlOiBjb250ZW50VHlwZSwgY29udGVudEJvZHk6IHJlc3VsdC5ib29sZWFuVmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFhQYXRoUmVzdWx0VHlwZXMuVU5PUkRFUkVEX05PREVfSVRFUkFUT1JfVFlQRTpcbiAgICAgICAgICAgICAgICBjYXNlIFhQYXRoUmVzdWx0VHlwZXMuT1JERVJFRF9OT0RFX0lURVJBVE9SX1RZUEU6XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVyYXRpb25OdW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaXRlcmF0aW9uTnVtYmVyIDwgWFBhdGhFdmFsdWF0b3IuTUFYX1hQQVRIX0lURVJBVElPTlMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbk51bWJlcisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHJlc3VsdC5pdGVyYXRlTmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50VmFsdWUgPSBfZ2V0QXR0cmlidXRlU291cmNlKGF0dHJpYnV0ZVNvdXJjZSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMucHVzaCh7Y29udGVudFR5cGU6IGNvbnRlbnRUeXBlLCBjb250ZW50Qm9keTogY29udGVudFZhbHVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBYUGF0aFJlc3VsdFR5cGVzLlVOT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEU6XG4gICAgICAgICAgICAgICAgY2FzZSBYUGF0aFJlc3VsdFR5cGVzLk9SREVSRURfTk9ERV9TTkFQU0hPVF9UWVBFOlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdC5zbmFwc2hvdExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gcmVzdWx0LnNuYXBzaG90SXRlbShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFZhbHVlID0gX2dldEF0dHJpYnV0ZVNvdXJjZShhdHRyaWJ1dGVTb3VyY2UsIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzLnB1c2goe2NvbnRlbnRUeXBlOiBjb250ZW50VHlwZSwgY29udGVudEJvZHk6IGNvbnRlbnRWYWx1ZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgWFBhdGhSZXN1bHRUeXBlcy5BTllfVU5PUkRFUkVEX05PREVfVFlQRTpcbiAgICAgICAgICAgICAgICBjYXNlIFhQYXRoUmVzdWx0VHlwZXMuRklSU1RfT1JERVJFRF9OT0RFX1RZUEU6XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSByZXN1bHQuc2luZ2xlTm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRWYWx1ZSA9IF9nZXRBdHRyaWJ1dGVTb3VyY2UoYXR0cmlidXRlU291cmNlLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMucHVzaCh7Y29udGVudFR5cGU6IGNvbnRlbnRUeXBlLCBjb250ZW50Qm9keTogY29udGVudFZhbHVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZXN1bHRUeXBlIGZvdW5kOiBcIiArIHJlc3VsdFR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29udGVudHM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmFsdWF0ZXMgdGhlIG1ldGEgdGFnIHNjcmFwZXIgYWdhaW5zdCB0aGUgc3BlY2lmaWVkIEhUTUxEb2N1bWVudC5cbiAgICAgKiBBIGxpc3Qgb2YgQ29udGVudCBvYmplY3RzIGFyZSByZXR1cm5lZCBpZiBub24tdHJpdmlhbCBDb250ZW50IG1hdGNoaW5nIHRoZVxuICAgICAqIElTY3JhcGVyU3BlY2lmaWNhdGlvbiBjb3VsZCBiZSBmb3VuZDsgYW4gZW1wdHkgbGlzdCBpcyByZXR1cm5lZCBvdGhlcndpc2UuXG4gICAgICpcbiAgICAgKiBUaGUgbWV0YSB0YWcgc2NyYXBlciBzcGVjaWZpZXMgYSBsaXN0IG9mIHJlcXVpcmVkIGFuZCBzY3JhcGFibGUgcHJvcGVydGllcy5cbiAgICAgKiBJZiB0aGUgcmVxdWlyZWQgcHJvcGVydGllcyBtYXRjaCB0aGVpciBleHBlY3RlZCB2YWx1ZXMsIGNvbnRlbnQgZnJvbSB0aGUgc2NyYXBhYmxlXG4gICAgICogcHJvcGVydGllcyBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSBTY3JhcGVyI3NjcmFwZS4gTm90ZSB0aGF0IGNvbnRlbnQgY29uc3RyYWludHNcbiAgICAgKiBhcmUgbm90IGNoZWNrZWQgYnkgdGhpcyBtZXRob2QuIFRoZXkgYXJlIGNoZWNrZWQgYnkgU2NyYXBlciNzY3JhcGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHRtbERvY3VtZW50XG4gICAgICogICAgICAgICAgICBUaGUgSFRNTERvY3VtZW50IHRvIGF0dGVtcHQgdG8gc2NyYXBlIENvbnRlbnQgZnJvbSAodGhlXG4gICAgICogICAgICAgICAgICBIVE1MRG9jdW1lbnQncyBVUkwgd2lsbCBiZSBzY3JhcGVkKS4gU2VlIGh0dHBzOi8vXG4gICAgICogICAgICAgICAgICBkZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxEb2N1bWVudCBmb3IgbW9yZVxuICAgICAqICAgICAgICAgICAgaW5mb3JtYXRpb24gYWJvdXQgSFRNTERvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplZFNjcmFwZXJcbiAgICAgKiAgICAgICAgICAgIFRoZSBqc29uLWVuY29kZWQgbWV0YSB0YWcgc2NyYXBlciBzcGVjaWZpY2F0aW9uIHRoYXQgZGVzY3JpYmVzIGhvdyB0byBzY3JhcGVcbiAgICAgKiAgICAgICAgICAgIENvbnRlbnQuIFRoZSBzY2hlbWEgaXMgZGVzY3JpYmVkIGluIHRoZSBpbnRlcmZhY2VzLiBTZWUgdGVzdHMgZm9yIGV4YW1wbGUgaW52b2NhdGlvbi5cbiAgICAgKiAgICAgICAgICAgIElmIG11bHRpcGxlIHRhZ3Mgd2l0aCB0aGUgc2FtZSBuYW1lIGFyZSBmb3VuZCwgdGhpcyBldmFsdWF0b3Igb25seSB1c2VzIHRoZSBmaXJzdC5cbiAgICAgKiAgICAgICAgICAgIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBzY3JhcGVyIHNjaGVtYSwgc2VlIGJpdC5wY29tcC5zY3JhcGUubWV0YXRhZyBkb2N1bWVudGF0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiBBIGxpc3Qgb2YgQ29udGVudCBvYmplY3RzIGlmIG5vbi10cml2aWFsIENvbnRlbnQgbWF0Y2hpbmcgdGhlXG4gICAgICogICAgICAgICBJU2NyYXBlclNwZWNpZmljYXRpb24gY291bGQgYmUgZm91bmQ7IGFuIGVtcHR5IGxpc3Qgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGNsYXNzIE1ldGF0YWdFdmFsdWF0b3IgaW1wbGVtZW50cyBJRXZhbHVhdG9yIHtcbiAgICAgICAgY29uc3RydWN0b3IocHJpdmF0ZSBjc3NFdmFsdWF0b3I6Q3NzRXZhbHVhdG9yKSB7XG4gICAgICAgIH1cblxuICAgICAgICBleGVjdXRlKGh0bWxEb2N1bWVudDpEb2N1bWVudCxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkU2NyYXBlcjpzdHJpbmcpOkFycmF5PElTY3JhcGVDb250ZW50PiB7XG5cbiAgICAgICAgICAgIHZhciBzY3JhcGVyOklNZXRhdGFnU2NyYXBlclNwZWNpZmljYXRpb24gPSBKU09OLnBhcnNlKHNlcmlhbGl6ZWRTY3JhcGVyKTtcblxuICAgICAgICAgICAgLy8gYXJyYXkgb2YgcHJvcGVydGllcyArIGV4cGVjdGVkIHZhbHVlc1xuICAgICAgICAgICAgLy8gYWxsIHByb3BlcnR5L3ZhbHVlIHJlcXVpcmVtZW50cyBtdXN0IGJlIHNhdGlzZmllZCBmb3Igc2NyYXBpbmcgdG8gb2NjdXJcbiAgICAgICAgICAgIHZhciByZXF1aXJlZFByb3BlcnRpZXMgPSBzY3JhcGVyLnJlcXVpcmVkUHJvcGVydGllcztcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgdG8gc2NyYXBlIGlmIHJlcXVpcmVkIHByb3BlcnRpZXMgYXJlIHNhdGlzZmllZFxuICAgICAgICAgICAgdmFyIHNjcmFwYWJsZVByb3BlcnRpZXMgPSBzY3JhcGVyLnNjcmFwYWJsZVByb3BlcnRpZXM7XG4gICAgICAgICAgICB2YXIgY29udGVudHMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKCFyZXF1aXJlZFByb3BlcnRpZXMgfHwgIXNjcmFwYWJsZVByb3BlcnRpZXMgfHwgIXNjcmFwYWJsZVByb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0YXRhZyBzY3JhcGVyOiBudWxsIG9yIGVtcHR5IHBhcmFtZXRlcnM6IFwiICsgW3JlcXVpcmVkUHJvcGVydGllcywgc2NyYXBhYmxlUHJvcGVydGllc10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVxdWlyZWRQcm9wZXJ0aWVzTWF0Y2ggID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHJlcXVpcmVkIHByb3BlcnRpZXMgYXJlIHNhdGlzZmllZFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXF1aXJlZFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRQcm9wZXJ5ID0gcmVxdWlyZWRQcm9wZXJ0aWVzW2ldO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmNzc0V2YWx1YXRvci5leGVjdXRlKGh0bWxEb2N1bWVudCwgXCJtZXRhW3Byb3BlcnR5PVxcXCJcIiArIHJlcXVpcmVkUHJvcGVyeS5uYW1lICsgXCJcXFwiXVwiLCBcIktleXdvcmRzXCIsIFwiY29udGVudFwiKVxuICAgICAgICAgICAgICAgICAgICAuc2hpZnQoKTsgLy9vbmx5IHVzZSB0aGUgZmlyc3QgdGFnIGZvdW5kXG5cbiAgICAgICAgICAgICAgICAvLyByZXF1aXJlZCBwcm9wZXJ0eSBub3QgZm91bmQgb3IgZG9lc24ndCBtYXRjaCByZXF1aXJlZCB2YWx1ZSAtIHNlbmQgaXQgdG8gdGhlIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIGlmICghY29udGVudCB8fCBjb250ZW50LmNvbnRlbnRCb2R5ICE9PSByZXF1aXJlZFByb3BlcnkudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRQcm9wZXJ0aWVzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudHMucHVzaCh7IGNvbnRlbnRUeXBlOiBcInJlcXVpcmVkUHJvcGVydGllc01hdGNoXCIsIGNvbnRlbnRCb2R5OiBcImZhbHNlXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgcmVxdWlyZWQgcHJvcGVydGllcyBtYXRjaGVzLCBzZW5kIGl0IHRvIHRoZSBleHRlbnNpb25cbiAgICAgICAgICAgIGlmIChyZXF1aXJlZFByb3BlcnRpZXNNYXRjaCkgY29udGVudHMucHVzaCh7IGNvbnRlbnRUeXBlOiBcInJlcXVpcmVkUHJvcGVydGllc01hdGNoXCIsIGNvbnRlbnRCb2R5OiBcInRydWVcIiB9KTtcblxuICAgICAgICAgICAgLy8gaWYgYWxsIHJlcXVpcmVkIHByb3BlcnRpZXMgYXJlIHNhdGlzZmllZCwgc2NyYXBlIGNvbnRlbnQgZnJvbSBwYWdlXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjcmFwYWJsZVByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NyYXBhYmxlUHJvcGVyeSA9IHNjcmFwYWJsZVByb3BlcnRpZXNbaV07XG5cbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuY3NzRXZhbHVhdG9yLmV4ZWN1dGUoaHRtbERvY3VtZW50LCBcIm1ldGFbcHJvcGVydHk9XFxcIlwiICsgc2NyYXBhYmxlUHJvcGVyeS5uYW1lICsgXCJcXFwiXVwiLCBzY3JhcGFibGVQcm9wZXJ5LmNvbnRlbnRUeXBlLCBcImNvbnRlbnRcIilcbiAgICAgICAgICAgICAgICAgICAgLnNoaWZ0KCk7IC8vb25seSB1c2UgdGhlIGZpcnN0IHByb3BlcnR5IGZvdW5kXG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50cy5wdXNoKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXZhbHVhdGVzIGEgVGV4dEpzUmVnZXggc2NyYXBlciBleHByZXNzaW9uIGFnYWluc3QgdGhlIHNwZWNpZmllZFxuICAgICAqIEhUTUxEb2N1bWVudC4gQWxsIG1hdGNoaW5nIENvbnRlbnQgaXMgc2NyYXBlZCBhbmQgcmV0dXJuZWQgaW4gbGlzdCBmb3JtLlxuICAgICAqXG4gICAgICogQSBUZXh0SnNSZWdleCBleHByZXNzaW9uIGlzIGRlZmluZWQgYnkgdGhlIGZvbGxvd2luZyBpbnB1dHM6XG4gICAgICogXG4gICAgICogMSkgdGhlIGV4cHJlc3Npb24sIHdoaWNoIGlzIGEgY29tYmluYXRpb24gb2YgMiBwYXJ0czogdGhlIG1hdGNoIHBhdHRlcm4sIGFuZCB0aGUgcmVwbGFjZW1lbnRcbiAgICAgKiBwYXR0ZXJuLlxuICAgICAqIFxuICAgICAqIFRoZSBtYXRjaCBwYXR0ZXJuIGlzIGEgSlMgcmVnZXggdG8gYmUgYXBwbGllZCB0byB0aGUgdGV4dCBjb250ZW50IGluIHF1ZXN0aW9uLiBJZiB0aGUgcmVnZXggd2FzIG5vdCBtYXRjaGVkXG4gICAgICogaW4gdGhlIHRleHQgbm8gY29udGVudCB3aWxsIGJlIHJldHVybmVkOyBvbmx5IGlmIGl0IHdhcyBtYXRjaGVkIGRvZXMgdGhlIHJlcGxhY2VtZW50IHN0ZXAgb2NjdXIuIEdpdmVuIHRoZSBtYXRjaCBwYXR0ZXJuXG4gICAgICogcmVnZXgsIHRoZSBldmFsdWF0b3Igd2lsbCBhcHBseSB0aGUgcmVwbGFjZW1lbnQgZXhwcmVzc2lvbiB1c2luZyBzdHJpbmcucmVwbGFjZShtYXRjaFBhdHRlcm5SZWdleCwgcmVwbGFjZW1lbnRQYXR0ZXJuKVxuICAgICAqIG9uIHRoZSB0ZXh0IGNvbnRlbnQgZm91bmQgdG8gZ2VuZXJhdGUgdGhlIGZpbmFsIG91dHB1dC4gRm9yIHRoZSBmdWxsIHNwZWNpZmljYXRpb24gb24gdGhlIHN0cmluZyByZXBsYWNlLFxuICAgICAqIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvcmVwbGFjZS5cbiAgICAgKiBUaGUgY2FsbGVyIG11c3QgdXNlIHRoZSBkZWxpbWl0ZXIgJ14qJyB0byBzcGxpdCB0aGUgdHdvIGNvbXBvbmVudHMgc28gdGhhdCB0aGlzIGV2YWx1YXRvciBjYW4gcGFyc2VcbiAgICAgKiB0aGUgdHdvLXBhcnQgZXhwcmVzc2lvbiBpbnRvIGl0cyBwcm9wZXIgY29tcG9uZW50cy5cbiAgICAgKiBcbiAgICAgKiBBIHZhbGlkIGV4cHJlc3Npb24gbWF5IGxvb2sgbGlrZTogXCIuKihBbWF6b24gRWNobykuKl4qVGhlIHByb2R1Y3QgaXMgJDFcIi4gV2hlbiBhcHBsaWVkIHRvIHRoZSB0ZXh0IFxuICAgICAqIFwiQnV5IGFuIEFtYXpvbiBFY2hvIG5vd1wiLCB0aGUgb3V0cHV0IGNvbnRlbnQgYm9keSB3b3VsZCBiZSBcIlRoZSBwcm9kdWN0IGlzIEFtYXpvbiBFY2hvXCIuIEFueSBudW1iZXIgb2ZcbiAgICAgKiBjYXB0dXJlIGdyb3VwcyBmcm9tIHRoZSBtYXRjaCBwYXR0ZXJuIHBhcnQgb2YgdGhlIGV4cHJlc3Npb24gbWF5IGJlIHVzZWQgaW4gdGhlIHJlcGxhY2VtZW50IHBvcnRpb24uXG4gICAgICogXG4gICAgICogMikgYSBjb250ZXh0IG5vZGUsIHdoaWNoIGRlZmluZXMgd2hlcmUgb24gdGhlIHBhZ2UgdG8gcGVyZm9ybSB0aGUgdGV4dCBzZWFyY2guXG4gICAgICogXG4gICAgICogVGhpcyBldmFsdWF0b3Igd2lsbCBjaGVjayBhbGwgdGV4dHVhbCBub2RlcyB0aGF0IGFyZSBkZXNjZW5kYW50cyBvZiB0aGUgY29udGV4dFxuICAgICAqIG5vZGUgdG8gZmluZCB0ZXh0IHRoYXQgbWF0Y2hlcyB0aGUgcHJvdmlkZWQgcmVnZXgsIGFuZCBhZGQgYW55IG1hdGNoZXMgZm91bmQgdG8gdGhlIFxuICAgICAqIGNvbnRlbnQgbGlzdC4gTm90ZSB0aGF0IHdoaWxlIGl0IGlzIHBvc3NpYmxlIHRvIHBlcmZvcm0gdGhpcyBzZWFyY2ggZnJvbSB0aGUgXG4gICAgICogSFRNTERvY3VtZW50J3Mgcm9vdCwgaXQgaXMgZGlzY291cmFnZWQgYXMgbWF5IGJlIGluZWZmaWNpZW50IHRvIHBlcmZvcm0gcmVnZXhwXG4gICAgICogbWF0Y2hpbmcgb24gYSBsYXJnZSBudW1iZXIgb2Ygc3RyaW5ncy5cbiAgICAgKiBcbiAgICAgKiBBIG5vdGUgb24gbGltaXRzOiBtYXhpbXVtIG5vZGVzIHRvIHByb2Nlc3MgYW5kIG1heGltdW0gdGV4dCBsZW5ndGggcGVyIGNhbGwgYXJlIGltcG9zZWQgdG8gbGltaXQgdGhlIGFtb3VudCBvZlxuICAgICAqIHByb2Nlc3NpbmcsIGR1ZSB0byBob3cgY29tcHV0ZS1pbnRlbnNpdmUgZXZhbHVhdGluZyBhIHJlZ2V4IG9uIGEgbGFyZ2UgYm9keSBvZiB0ZXh0IGNhbiBiZS4gQmVjYXVzZSBpdCdzIHBvdGVudGlhbGx5XG4gICAgICogcG9zc2libGUgZm9yIHRoZSBub2RlIHRvIGNvbnRhaW4gbGFyZ2UgcG9ydGlvbnMgb2YgdGhlIGRvY3VtZW50LCB3ZSBib3VuZCB0aGUgdG90YWwgYW1vdW50IG9mIHByb2Nlc3NpbmcuIFxuICAgICAqIFNlZSBUZXh0SnNSZWdleEV2YWx1YXRvciNNQVhfTk9ERVMgYW5kIFRleHRKc1JlZ2V4RXZhbHVhdG9yI01BWF9URVhUX0xFTkdUSCBmb3IgdGhlIGFjdHVhbCBsaW1pdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHRtbERvY3VtZW50XG4gICAgICogICAgICAgICAgICBUaGUgSFRNTERvY3VtZW50IHRvIGF0dGVtcHQgdG8gc2NyYXBlIENvbnRlbnQgZnJvbSAodGhlXG4gICAgICogICAgICAgICAgICBIVE1MRG9jdW1lbnQncyBVUkwgd2lsbCBiZSBzY3JhcGVkKS4gU2VlIGh0dHBzOi8vXG4gICAgICogICAgICAgICAgICBkZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxEb2N1bWVudCBmb3IgbW9yZVxuICAgICAqICAgICAgICAgICAgaW5mb3JtYXRpb24gYWJvdXQgSFRNTERvY3VtZW50cy5cbiAgICAgKiBAcGFyYW0gZXhwcmVzc2lvblxuICAgICAqICAgICAgICAgICAgVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IHdlIHBlcmZvcm0gYSB0ZXh0dWFsIHNlYXJjaCBhZ2FpbnN0IHRoZSBcbiAgICAgKiAgICAgICAgICAgIGNvbnRleHQgbm9kZSBhZ2FpbnN0LlxuICAgICAqIEBwYXJhbSBjb250ZW50VHlwZVxuICAgICAqICAgICAgICAgICAgVGhlIGV4cGVjdGVkIGNvbnRlbnQgdHlwZSBvZiB0aGUgc2NyYXBlZCBjb250ZW50LlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVTb3VyY2VcbiAgICAgKiAgICAgICAgICAgIFRoaXMgYXR0cmlidXRlIGlzIGlnbm9yZWQgaGVyZSBhcyB3ZSBzdHJpY3RseSBjaGVjayBmb3IgdGV4dENvbnRlbnQgbWF0Y2hlcy5cbiAgICAgKiBAcGFyYW0gY29udGV4dE5vZGUgICBcbiAgICAgKiAgICAgICAgICAgIElmIHNwZWNpZmllZCwgd2UgZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24gc3RhcnRpbmcgZnJvbSB0aGUgY29udGV4dCBub2RlIFxuICAgICAqICAgICAgICAgICAgcmF0aGVyIHRoYW4gdGhlIGRvY3VtZW50J3Mgcm9vdC4gSWYgbnVsbCwgd2Ugd2lsbCB1c2UgdGhlIGRvY3VtZW50IHJvb3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIEFuIGFycmF5IG9mIHRleHRDb250ZW50IGZvciB0aGUgZ2l2ZW4gZXhwcmVzc2lvbi5cbiAgICAgICAgICAgICAgIEFuIGVtcHR5IGxpc3QgaWYgdGhlcmUgaXMgbm8gc3VjaCBjb250ZW50LlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvZG9jdW1lbnQuZXZhbHVhdGVcbiAgICAgKi9cbiAgICBjbGFzcyBUZXh0SnNSZWdleEV2YWx1YXRvciBpbXBsZW1lbnRzIElFdmFsdWF0b3Ige1xuICAgICAgICAvKiBXZSB1c2UgYSBjaGFyYWN0ZXIgc2VxdWVuY2UgdGhhdCBpcyBpbnZhbGlkIGluIGEgcmVhbCByZWdleCBhcyB0aGUgZGVsaW1pdGVyIHRvIHNwbGl0IHRoZSBjb21wb25lbnRzLiAqL1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfREVMSU0gPSBcIl4qXCI7XG5cbiAgICAgICAgLyogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRleHQgbm9kZXMgdGhhdCB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGV2YWx1YXRvciwgaWYgdGhlIGNvbnRleHQgbm9kZSBjb250YWlucyBhIGxhcmdlIG51bWJlciBvZiB0ZXh0dWFsIG5vZGVzLiAqL1xuICAgICAgICBzdGF0aWMgTUFYX05PREVTID0gNTAwO1xuICAgICAgICAvKiBUaGUgbWF4aW11bSBsZW5ndGggKGluIGNoYXJhY3RlcnMpIG9mIHRoZSB0ZXh0IG5vZGVzIHRoYXQgY2FuIGJlIHByb2Nlc3NlZC4gTG9uZ2VyIHRleHQgY29udGVudCB3aWxsIGJlIHRydW5jYXRlZCBiZXlvbmQgdGhpcyBwb2ludC4gKi9cbiAgICAgICAgc3RhdGljIE1BWF9URVhUX0xFTkdUSCA9IDUwMDtcblxuICAgICAgICBleGVjdXRlKGh0bWxEb2N1bWVudDpEb2N1bWVudCxcbiAgICAgICAgICAgIGV4cHJlc3Npb246c3RyaW5nLFxuICAgICAgICAgICAgY29udGVudFR5cGU6c3RyaW5nLFxuICAgICAgICAgICAgYXR0cmlidXRlU291cmNlPzpzdHJpbmcsXG4gICAgICAgICAgICBjb250ZXh0Tm9kZT86IEhUTUxFbGVtZW50KTpBcnJheTxJU2NyYXBlQ29udGVudD4ge1xuICAgICAgICB2YXIgY29tcG9uZW50cyA9IGV4cHJlc3Npb24uc3BsaXQoVGV4dEpzUmVnZXhFdmFsdWF0b3IuX0RFTElNKTtcbiAgICAgICAgaWYgKGNvbXBvbmVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGV4dEpzUmVnZXggbXVzdCBjb250YWluIGEgbWF0Y2ggcGF0dGVybiBhbmQgYSByZXBsYWNlbWVudCBwYXR0ZXJuOiBcIiArIEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudHMpKTtcbiAgICAgICAgfVxuICAgICAgICAvL0lmIG91ciByZXBsYWNlbWVudCBzdHJpbmcgaW5jbHVkZXMgdGhlIGRlbGltaXRlciwgd2UgbmVlZCB0byBqb2luIGJhY2sgdGhlIHJlc3Qgb2Ygc3RyaW5nIGludG8gdGhlIHJlcGxhY2VtZW50IGNvbXBvbmVudFxuICAgICAgICBpZiAoY29tcG9uZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICBjb21wb25lbnRzWzFdID0gY29tcG9uZW50cy5zbGljZSgxKS5qb2luKFRleHRKc1JlZ2V4RXZhbHVhdG9yLl9ERUxJTSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gY29tcG9uZW50c1swXTtcbiAgICAgICAgdmFyIHJlcGxhY2VtZW50UGF0dGVybiA9IGNvbXBvbmVudHNbMV07XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAobWF0Y2hQYXR0ZXJuKTtcblxuICAgICAgICAvL0ZpcnN0IHJldHJpZXZlIGFsbCB0ZXh0dWFsIG5vZGVzIHRoYXQgYXJlIHBhcnQgb2YgdGhpcyBET00gc3VidHJlZSB1c2luZyBhIGZpeGVkIGV4cHJlc3Npb24uIFBhc3MgbnVsbCB0byB1c2Ugcm9vdCBpZiBub3Qgc3BlY2lmaWVkXG4gICAgICAgIHZhciB0ZXh0Tm9kZXM6IEFycmF5PEhUTUxFbGVtZW50PiA9IHJldHJpZXZlWHBhdGhOb2RlcyhodG1sRG9jdW1lbnQsIFwiZGVzY2VuZGFudC1vci1zZWxmOjoqL3RleHQoKVwiLCAoY29udGV4dE5vZGUgPyBjb250ZXh0Tm9kZSA6IG51bGwpKTtcbiAgICAgICAgdGV4dE5vZGVzID0gdGV4dE5vZGVzLnNsaWNlKDAsIE1hdGgubWluKHRleHROb2Rlcy5sZW5ndGgsIFRleHRKc1JlZ2V4RXZhbHVhdG9yLk1BWF9OT0RFUykpO1xuXG4gICAgICAgIHZhciByZXN1bHRzOiBBcnJheTxJU2NyYXBlQ29udGVudD4gPSBbXTtcblxuICAgICAgICB0ZXh0Tm9kZXMuZm9yRWFjaChmdW5jdGlvbih0ZXh0Tm9kZSkge1xuICAgICAgICAgICAgaWYgKHRleHROb2RlICYmIHRleHROb2RlLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHRDb250ZW50ID0gdGV4dE5vZGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgdGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudC5zdWJzdHJpbmcoMCwgTWF0aC5taW4odGV4dENvbnRlbnQubGVuZ3RoLCBUZXh0SnNSZWdleEV2YWx1YXRvci5NQVhfVEVYVF9MRU5HVEgpKTtcblxuICAgICAgICAgICAgICAgIHZhciByZWdleFJlc3VsdCA9IHRleHRDb250ZW50Lm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhSZXN1bHQgIT0gbnVsbCAmJiByZWdleFJlc3VsdFswXSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFZhbHVlID0gcmVnZXhSZXN1bHRbMF0ucmVwbGFjZShyZWdleCwgcmVwbGFjZW1lbnRQYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHtjb250ZW50VHlwZTogY29udGVudFR5cGUsIGNvbnRlbnRCb2R5OiBjb250ZW50VmFsdWV9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0czsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBkZWZpbmVzIGhvdyB7QGxpbmsgTWV0YXRhZ0V2YWx1YXRvcn0gc2hvdWxkIHNjcmFwZSB0aGUgbWV0YSB0YWdzXG4gICAgICovXG4gICAgaW50ZXJmYWNlIElNZXRhdGFnU2NyYXBlclNwZWNpZmljYXRpb24ge1xuICAgICAgICByZXF1aXJlZFByb3BlcnRpZXM6IEFycmF5PElNZXRhdGFnUmVxdWlyZW1lbnQ+O1xuICAgICAgICBzY3JhcGFibGVQcm9wZXJ0aWVzOiBBcnJheTxJTWV0YXRhZ1NjcmFwYWJsZT47XG4gICAgfVxuIFxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIG1ldGF0YWcgbmFtZS92YWx1ZSBwYWlycyB0aGF0IG11c3QgYmUgc2F0aXNmaWVkXG4gICAgICogaW4gb3JkZXIgdG8gc2NyYXBlIGNvbnRlbnQuIFRyaXZpYWxseSBzYXRpc2ZpZWQgaWYgZW1wdHkuXG4gICAgICogT25seSB0aGUgZmlyc3QgcHJvcGVydHkgbWF0Y2hlZCB3aWxsIGJlIHVzZWQuXG4gICAgICovXG4gICAgaW50ZXJmYWNlIElNZXRhdGFnUmVxdWlyZW1lbnQge1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXJyYXkgZGVzY3JpYmluZyBtZXRhdGFncyB0byBzY3JhcGUuIE9ubHkgdGhlIGZpcnN0XG4gICAgICogcHJvcGVydHkgbWF0Y2hlZCB3aWxsIGJlIHNjcmFwZWQuXG4gICAgICovXG4gICAgaW50ZXJmYWNlIElNZXRhdGFnU2NyYXBhYmxlIHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBjb250ZW50VHlwZTogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnN0YW50IGRlZmluaXRpb24gb2YgWFBhdGggUmVzdWx0IFR5cGVzXG4gICAgICogUmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1hQYXRoUmVzdWx0XG4gICAgICovXG4gICAgZW51bSBYUGF0aFJlc3VsdFR5cGVzIHtcbiAgICAgICAgQU5ZX1RZUEUgPSAwLFxuICAgICAgICBOVU1CRVJfVFlQRSxcbiAgICAgICAgU1RSSU5HX1RZUEUsXG4gICAgICAgIEJPT0xFQU5fVFlQRSxcbiAgICAgICAgVU5PUkRFUkVEX05PREVfSVRFUkFUT1JfVFlQRSxcbiAgICAgICAgT1JERVJFRF9OT0RFX0lURVJBVE9SX1RZUEUsXG4gICAgICAgIFVOT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEUsXG4gICAgICAgIE9SREVSRURfTk9ERV9TTkFQU0hPVF9UWVBFLFxuICAgICAgICBBTllfVU5PUkRFUkVEX05PREVfVFlQRSxcbiAgICAgICAgRklSU1RfT1JERVJFRF9OT0RFX1RZUEVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgdG8gcmV0cmlldmUgYWxsIFhQYXRoIG5vZGVzIHRoYXQgbWF0Y2ggdGhlIGV4cHJlc3Npb24sIGdpdmVuIHRoZSBkb2N1bWVudCBhbmRcbiAgICAgKiBhIGNvbnRleHQgbm9kZS4gVGhlIGNvbnRleHQgbm9kZSBjYW4gYmUgdGhvdWdodCBvZiBhcyB0aGUgXCJzdGFydCBub2RlXCIgb2YgdGhlIFhwYXRoIFxuICAgICAqIHByb2Nlc3NpbmcsIG9yIHRoZSByb290IG9mIHRoZSB0cmVlIHRoYXQgaXMgYmVpbmcgZXZhbHVhdGVkIGJ5IHRoZSBYcGF0aCBleHByZXNzaW9uLCBcbiAgICAgKiB3aGVyZSBhbGwgbm9kZXMgaW4gdGhlIGRvY3VtZW50IHRoYXQgYXJlIG5vdCBlaXRoZXIgdGhlIGNvbnRleHQgbm9kZSBvciBhIGRlc2NlbmRhbnQgXG4gICAgICogYXJlIG5vdCBjb25zaWRlcmVkLlxuICAgICAqIFNlZSB0aGUgWHBhdGggc3BlYyBmb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9SRUMteHBhdGgtMTk5OTExMTYvXG4gICAgICogXG4gICAgICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gZXhwZWN0cyBhbiBYcGF0aCBleHByZXNzaW9uIHRoYXQgcmV0dXJucyBhIG5vZGUgc2V0LiBJZiB0aGUgXG4gICAgICogWHBhdGggZXZhbHVhdGVzIHRvIHNvbWV0aGluZyBvdGhlciB0aGFuIGEgY29sbGVjdGlvbiBvZiBub2RlcywgdGhpcyBmdW5jdGlvbiB3aWxsIFxuICAgICAqIHRocm93IGFuIGVycm9yLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBodG1sRG9jdW1lbnQgIHRoZSBIVE1MIGRvY3VtZW50IG9uIHdoaWNoIHRvIGV4ZWN1dGUgdGhlIGV4cHJlc3Npb24uXG4gICAgICogQHBhcmFtIGV4cHJlc3Npb24gICAgdGhlIFhwYXRoIGV4cHJlc3Npb24gdG8gdXNlIHRvIGV2YWx1YXRlIG9uIHRoZSBjdXJyZW50IERPTVxuICAgICAqIEBwYXJhbSBjb250ZXh0Tm9kZSAgIHRoZSBjb250ZXh0IG5vZGUgdG8gdHJlYXQgYXMgdGhlIHJvb3Qgb2YgdGhlIFhwYXRoIHNlYXJjaC4gSWYgbnVsbCwgXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgdGhpcyB3aWxsIGRlZmF1bHQgdG8gRE9NIHJvb3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV0cmlldmVYcGF0aE5vZGVzKGh0bWxEb2N1bWVudDpEb2N1bWVudCxcbiAgICAgICAgZXhwcmVzc2lvbjpzdHJpbmcsXG4gICAgICAgIGNvbnRleHROb2RlOiBIVE1MRWxlbWVudCk6QXJyYXk8SFRNTEVsZW1lbnQ+IHtcblxuICAgICAgICBpZiAoIWh0bWxEb2N1bWVudC5ldmFsdWF0ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaHRtbERvY3VtZW50IGRvZXMgbm90IGRlZmluZSBldmFsdWF0ZSgpXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGV2YWx1YXRlIFhwYXRoIGFzIGFuIG9yZGVyZWQgc25hcHNob3QsIHdoaWNoIGRvZXMgbm90IGJlY29tZSBpbnZhbGlkYXRlZCB3aGVuIHRoZSBET00gY2hhbmdlc1xuICAgICAgICB2YXIgcmVzdWx0ID0gaHRtbERvY3VtZW50LmV2YWx1YXRlKGV4cHJlc3Npb24sIChjb250ZXh0Tm9kZSA/IGNvbnRleHROb2RlIDogaHRtbERvY3VtZW50KSAsIG51bGwsIFhQYXRoUmVzdWx0VHlwZXMuT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEUsIG51bGwpO1xuICAgICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQuc25hcHNob3RMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbm9kZXMucHVzaChyZXN1bHQuc25hcHNob3RJdGVtKGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tbW9uIGludGVyZmFjZSBmb3IgaG93IGRpZmZlcmVudCB0YXJnZXQgZXhwcmVzc2lvbiB0eXBlcyBtYXkgYmUgaW50ZXJwcmV0ZWQgZm9yIGEgZ2l2ZW4gdGFyZ2V0ZWQgc2VhcmNoIGxpc3RlbmVyIFxuICAgICAqIHNwZWNpZmljYXRpb24uIFxuICAgICAqIEN1cnJlbnRseSBvbmx5IFhwYXRoIGlzIHN1cHBvcnRlZCwgYnV0IGluIHRoZSBmdXR1cmUgb3RoZXIgdHlwZXMgc3VjaCBhcyBDU1MvWHBhdGgyIGV4cHJlc3Npb25zIG1heSBiZSB1c2VkLlxuICAgICAqL1xuICAgIGludGVyZmFjZSBJVGFyZ2V0RXhwcmVzc2lvbkV2YWx1YXRvciB7XG4gICAgICAgIGV2YWx1YXRlKGh0bWxEb2N1bWVudDogRG9jdW1lbnQsXG4gICAgICAgICAgICB0YXJnZXRFeHByZXNzaW9uOiBzdHJpbmcpOiBBcnJheTxIVE1MRWxlbWVudD47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSB0YXJnZXQgZXhwcmVzc2lvbiBldmFsdWF0b3IgdGhhdCBmaW5kcyB0YXJnZXQgZWxlbWVudHMgYmFzZWQgb24gYW4gWHBhdGggZXhwcmVzc2lvbiBwYXNzZWQgaW4uIFRoZSB0YXJnZXQgXG4gICAgICogZWxlbWVudHMgbXVzdCBiZSBvbmUgb3IgbW9yZSBIVE1MIG5vZGVzIC0gaWYgdGhlIHR5cGUgb2YgdGhlIHJlc3VsdCBpcyBub3QgYSBub2RlIHRoaXMgZXZhbHVhdG9yIHdpbGwgdGhyb3cuXG4gICAgICovXG4gICAgY2xhc3MgWHBhdGhUYXJnZXRFeHByZXNzaW9uRXZhbHVhdG9yIHtcbiAgICAgICAgcHVibGljIGV2YWx1YXRlKGh0bWxEb2N1bWVudDogRG9jdW1lbnQsIHRhcmdldEV4cHJlc3Npb246IHN0cmluZyk6IEFycmF5PEhUTUxFbGVtZW50PiB7XG4gICAgICAgICAgICByZXR1cm4gcmV0cmlldmVYcGF0aE5vZGVzKGh0bWxEb2N1bWVudCwgdGFyZ2V0RXhwcmVzc2lvbiwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21tb24gaW50ZXJmYWNlIGZvciBob3cgZGlmZmVyZW50IHRhcmdldGVkIHNlYXJjaCBhbGdvcml0aG1zIHNob3VsZCBiZSBhcHBsaWVkIHRvIGdlbmVyYXRlXG4gICAgICogYSB0YXJnZXRlZCBzZWFyY2ggbGlzdGVuZXIgcmVzdWx0LlxuICAgICAqL1xuICAgIGludGVyZmFjZSBJVGFyZ2V0ZWRTZWFyY2hBbGdvcml0aG0ge1xuICAgICAgICBzZWFyY2goaHRtbERvY3VtZW50OiBEb2N1bWVudCxcbiAgICAgICAgICAgIHNwZWNpZmljYXRpb246IElUYXJnZXRlZFNlYXJjaExpc3RlbmVyU3BlY2lmaWNhdGlvbixcbiAgICAgICAgICAgIHRhcmdldEVsZW1lbnRzOiBBcnJheTxIVE1MRWxlbWVudD4sXG4gICAgICAgICAgICBldmFsdWF0b3JzOiB7W3NjcmFwZXJUeXBlOnN0cmluZ106IElFdmFsdWF0b3J9KTogSVRhcmdldGVkU2VhcmNoTGlzdGVuZXJSZXN1bHQ7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFRoZSBSZXZlcnNlREZTU2VhcmNoQWxnb3JpdGhtIHVzZXMgYW4gdXB3YXJkLXNlYXJjaCBzdGFydGluZyBmcm9tIHRoZSB0YXJnZXQgZWxlbWVudCB0b3dhcmRzIGl0cyBhbmNlc3RvcnNcbiAgICAgKiB0byBzY3JhcGUgcmVsZXZhbnQgZWxlbWVudHMgbmVhciBhIHRhcmdldCBlbGVtZW50LiBHaXZlbiBhIHNlYXJjaCBkZXB0aCBOIGFuZCB0YXJnZXQgZWxlbWVudCBFLCBpdCB3aWxsIHBlcmZvcm0gdGhlXG4gICAgICogZm9sbG93aW5nIG9wZXJhdGlvbnM6XG4gICAgICogXG4gICAgICogMS4gU3RhcnQgYXQgc2VhcmNoIGRlcHRoIDAsIG9yIHRoZSB0YXJnZXQgZWxlbWVudCBFIGl0c2VsZi5cbiAgICAgKiAyLiBBcHBseSBhbGwgc2NyYXBlcnMgdG8gRSBhbmQgaXRzIHN1YnRyZWUsIGluY2x1ZGluZyBpbmRpcmVjdCBkZXNjZW5kYW50cy5cbiAgICAgKiAzLiBJbmNyZW1lbnQgc2VhcmNoIGRlcHRoIGFuZCBzZXQgRSB0byBiZWNvbWUgRSdzIHBhcmVudC5cbiAgICAgKiA0LiBSZXBlYXQgc3RlcHMgMi0zLlxuICAgICAqL1xuICAgIGNsYXNzIFJldmVyc2VERlNTZWFyY2hBbGdvcml0aG0gaW1wbGVtZW50cyBJVGFyZ2V0ZWRTZWFyY2hBbGdvcml0aG0ge1xuICAgICAgICAvL1NldCBtYXggcmVzdWx0cyBwZXIgc2NyYXBlciB0byAxIHRvIHByZXZlbnQgc2VuZGluZyB0b28gbWFueSBpcnJlbGV2YW50IHJlc3VsdHMgYmFja1xuICAgICAgICBzdGF0aWMgTUFYX0NPTlRFTlRTX1BFUl9TQ1JBUEVSOiBudW1iZXIgPSAxO1xuXG4gICAgICAgIHB1YmxpYyBzZWFyY2goaHRtbERvY3VtZW50OiBEb2N1bWVudCwgc3BlY2lmaWNhdGlvbjogSVRhcmdldGVkU2VhcmNoTGlzdGVuZXJTcGVjaWZpY2F0aW9uLCB0YXJnZXRFbGVtZW50czogQXJyYXk8SFRNTEVsZW1lbnQ+LCBcbiAgICAgICAgICAgIGV2YWx1YXRvcnM6IHtbc2NyYXBlclR5cGU6c3RyaW5nXTogSUV2YWx1YXRvcn0pIHtcblxuICAgICAgICAgICAgLyogUGVyZm9ybSBSZXZlcnNlREZTIGZvciBlYWNoIHRhcmdldCBlbGVtZW50IGluZGVwZW5kZW50bHksIHRoZW4gZmlsdGVyIG91dCBlbXB0eSByZXN1bHRzICovICAgIFxuICAgICAgICAgICAgdmFyIGFsbFJlc3VsdHMgOiBBcnJheTxJVGFyZ2V0ZWRTY3JhcGVSZXN1bHQ+ID0gdGFyZ2V0RWxlbWVudHMubWFwKCh0YXJnZXRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlYXJjaFNpbmdsZUVsZW1lbnQoaHRtbERvY3VtZW50LCBzcGVjaWZpY2F0aW9uLCB0YXJnZXRFbGVtZW50LCBldmFsdWF0b3JzKTtcbiAgICAgICAgICAgIH0pLmZpbHRlcigodGFyZ2V0ZWRTY3JhcGVSZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCFfaXNFbXB0eU9iamVjdCh0YXJnZXRlZFNjcmFwZVJlc3VsdC5lbGVtZW50U2NyYXBlUmVzdWx0KSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIDxJVGFyZ2V0ZWRTZWFyY2hMaXN0ZW5lclJlc3VsdD4ge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyUmVzdWx0VHlwZTogR2xvYmFsRGVjbGFyYXRpb25zLkV4cHJlc3Npb25TcGVjaWZpY2F0aW9uVHlwZS5UYXJnZXRlZFNlYXJjaCxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcklkOiBzcGVjaWZpY2F0aW9uLmxpc3RlbmVySWQsXG4gICAgICAgICAgICAgICAgcmVzdWx0czogYWxsUmVzdWx0c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIEhlbHBlciB0aGF0IHBlcmZvcm1zIHRoZSBzZWFyY2ggZm9yIGEgc2luZ2xlIHRhcmdldCBlbGVtZW50LCBhcyB0YXJnZXQgZWxlbWVudHMgY2FuIGJlIGV2YWx1YXRlZCBpbmRlcGVuZGVudGx5LiAqL1xuICAgICAgICBwcml2YXRlIF9zZWFyY2hTaW5nbGVFbGVtZW50KGh0bWxEb2N1bWVudDogRG9jdW1lbnQsIHNwZWNpZmljYXRpb246IElUYXJnZXRlZFNlYXJjaExpc3RlbmVyU3BlY2lmaWNhdGlvbiwgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQsIFxuICAgICAgICAgICAgZXZhbHVhdG9yczoge1tzY3JhcGVyVHlwZTpzdHJpbmddOiBJRXZhbHVhdG9yfSk6IElUYXJnZXRlZFNjcmFwZVJlc3VsdCB7XG4gICAgICAgICAgICB2YXIgc2VhcmNoRGVwdGg6IG51bWJlciA9IHNwZWNpZmljYXRpb24uZXhwcmVzc2lvblNwZWNpZmljYXRpb24uc2VhcmNoRGVwdGg7XG4gICAgICAgICAgICB2YXIgc2NyYXBlcnM6IEFycmF5PElTY3JhcGVyU3BlY2lmaWNhdGlvbj4gPSBzcGVjaWZpY2F0aW9uLnNjcmFwZXJzOyBcblxuICAgICAgICAgICAgdmFyIGN1cnJTZWFyY2hEZXB0aDogbnVtYmVyID0gMDtcbiAgICAgICAgICAgIHZhciBzY3JhcGVySURUb1Jlc3VsdHM6IHtbc2NyYXBlcklEOiBzdHJpbmddOiBBcnJheTxJU2NyYXBlQ29udGVudD59ID0ge307XG4gICAgICAgICAgICB2YXIgY3VycmVudEVsZW06IEhUTUxFbGVtZW50ID0gdGFyZ2V0RWxlbWVudDtcblxuICAgICAgICAgICAgLy8gU2VhcmNoIHVudGlsIHdlIGhpdCB0aGUgbWF4aW11bSBzZWFyY2ggZGVwdGggc3BlY2lmaWVkIG9yIHRoZSByb290IGVsZW1lbnRcbiAgICAgICAgICAgIHdoaWxlIChjdXJyU2VhcmNoRGVwdGggPCBzZWFyY2hEZXB0aCAmJiAhIWN1cnJlbnRFbGVtKSB7XG4gICAgICAgICAgICAgICAgLy8gQXBwbHkgZWFjaCBzY3JhcGVyIHdpdGhpbiB0aGUgY3VycmVudCBzZWFyY2ggZGVwdGhcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjcmFwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNjcmFwZXI6IElTY3JhcGVyU3BlY2lmaWNhdGlvbiA9IHNjcmFwZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9JZiB0aGlzIHNjcmFwZXIncyByZXN1bHRzIGVxdWFsIG1heCBsZW5ndGgsIG5vIG5lZWQgdG8ga2VlcCBzZWFyY2hpbmcgLSBza2lwIHRvIHRoZSBuZXh0IHNjcmFwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JhcGVySURUb1Jlc3VsdHNbY3VycmVudFNjcmFwZXIuc2NyYXBlclNpZ25hdHVyZV0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgc2NyYXBlcklEVG9SZXN1bHRzW2N1cnJlbnRTY3JhcGVyLnNjcmFwZXJTaWduYXR1cmVdLmxlbmd0aCA+PSBSZXZlcnNlREZTU2VhcmNoQWxnb3JpdGhtLk1BWF9DT05URU5UU19QRVJfU0NSQVBFUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyclNjcmFwZWRDb250ZW50czogQXJyYXk8SVNjcmFwZUNvbnRlbnQ+ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1RhcmdldGVkIHNlYXJjaCBpcyBvbmx5IGRlZmluZWQgZm9yIHNjcmFwZXIgdHlwZXMgd2hpY2ggc3VwcG9ydCBjb250ZXh0IG5vZGVzIC0gdmFsaWRhdGUgdGhlIHR5cGUgYW5kIHRoZW4gY2FsbCB0aGUgZXZhbHVhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goY3VycmVudFNjcmFwZXIuc2NyYXBlclR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFNjcmFwZXIuWFBBVEg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTY3JhcGVyLlRFWFRKU1JFR0VYOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyU2NyYXBlZENvbnRlbnRzID0gZXZhbHVhdG9yc1tjdXJyZW50U2NyYXBlci5zY3JhcGVyVHlwZV0uZXhlY3V0ZShodG1sRG9jdW1lbnQsIGN1cnJlbnRTY3JhcGVyLnNjcmFwZXIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjcmFwZXIuY29udGVudFR5cGUsIGN1cnJlbnRTY3JhcGVyLmF0dHJpYnV0ZVNvdXJjZSwgY3VycmVudEVsZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNjcmFwZXIgdHlwZSBmb3VuZCBmb3IgdGFyZ2V0ZWQgc2VhcmNoIGFsZ29yaXRobTogXCIgKyBjdXJyZW50U2NyYXBlci5zY3JhcGVyVHlwZSk7ICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9GaW5hbGx5LCB0cmltIHNjcmFwZWQgY29udGVudHMgYW5kIGFwcGVuZCB0byB0aGUgcmVzdWx0cyBsaXN0IGZvciB0aGlzIHNjcmFwZXIgKyBlbGVtZW50IGNvbWJpbmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldlNjcmFwZVJlc3VsdHM6IEFycmF5PElTY3JhcGVDb250ZW50PiA9IHNjcmFwZXJJRFRvUmVzdWx0c1tjdXJyZW50U2NyYXBlci5zY3JhcGVyU2lnbmF0dXJlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2U2NyYXBlUmVzdWx0cyAmJiBwcmV2U2NyYXBlUmVzdWx0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyYXBlcklEVG9SZXN1bHRzW2N1cnJlbnRTY3JhcGVyLnNjcmFwZXJTaWduYXR1cmVdID0gcHJldlNjcmFwZVJlc3VsdHMuY29uY2F0KGN1cnJTY3JhcGVkQ29udGVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsIFJldmVyc2VERlNTZWFyY2hBbGdvcml0aG0uTUFYX0NPTlRFTlRTX1BFUl9TQ1JBUEVSKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyclNjcmFwZWRDb250ZW50cyAmJiBjdXJyU2NyYXBlZENvbnRlbnRzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmFwZXJJRFRvUmVzdWx0c1tjdXJyZW50U2NyYXBlci5zY3JhcGVyU2lnbmF0dXJlXSA9IGN1cnJTY3JhcGVkQ29udGVudHMuc2xpY2UoMCwgUmV2ZXJzZURGU1NlYXJjaEFsZ29yaXRobS5NQVhfQ09OVEVOVFNfUEVSX1NDUkFQRVIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vU3dhbGxvdyBoZXJlIC0gYWxsIHNjcmFwZXJzIHNob3VsZCBiZSBldmFsdWF0ZWQgaW5kZXBlbmRlbnRseVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9PbmNlIGFsbCBzY3JhcGVycyBoYXZlIGJlZW4gYXBwbGllZCBhdCB0aGlzIHNlYXJjaCBkZXB0aCwgdXBkYXRlIHRoZSBlbGVtZW50IHRvIGl0cyBwYXJlbnQgYW5kIGluY3JlYXNlIHNlYXJjaCBkZXB0aFxuICAgICAgICAgICAgICAgIGN1cnJTZWFyY2hEZXB0aCsrO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtID0gY3VycmVudEVsZW0ucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vQ29udmVydCB0aGUgc2NyYXBlciBJRCByZXN1bHRzIHRvIGZpbmFsIGZvcm1cbiAgICAgICAgICAgIHZhciB0YXJnZXRTY3JhcGVSZXN1bHQ6IHtbc2NyYXBlcklEOiBzdHJpbmddOiBJU2NyYXBlclJlc3VsdH0gPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjcmFwZXJJRFRvUmVzdWx0cykubWFwKGZ1bmN0aW9uKGtleSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTY3JhcGVSZXN1bHRba2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBzY3JhcGVySURUb1Jlc3VsdHNba2V5XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gPElUYXJnZXRlZFNjcmFwZVJlc3VsdD4geyAgICBcbiAgICAgICAgICAgICAgICBlbGVtZW50U2NyYXBlUmVzdWx0OiB0YXJnZXRTY3JhcGVSZXN1bHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9IFxuXG4gICAgLyogXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIHZhbGlkYXRlIHRoYXQgYSBzY3JhcGVyIHNwZWNpZmljYXRpb24gaGFzIGFsbCByZXF1aXJlZCBmaWVsZHMgYXNcbiAgICAgKiBkZWZpbmVkIGJ5IHRoZSBJU2NyYXBlclNwZWNpZmljYXRpb24gaW50ZXJmYWNlLiBOb3RlIHRoYXQgaXQgd2lsbCBub3QgY2hlY2sgbG9naWMgXG4gICAgICogc3BlY2lmaWMgdG8gcmVxdWlyZW1lbnRzIG9mIHRoZSBTY3JhcGUgQVBJIHZzIExpc3RlbmVycyBBUEksIHN1Y2ggYXMgdGhlIGFkZGl0aW9uYWxcbiAgICAgKiByZXF1aXJlbWVudCBvZiBzY3JhcGVyIHNpZ25hdHVyZSBiZWluZyBwcmVzZW50IGluIHRoZSBMaXN0ZW5lcnMgQVBJLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIF92YWxpZGF0ZVNjcmFwZXIoc3BlY2lmaWNhdGlvbjpJU2NyYXBlclNwZWNpZmljYXRpb24pOiB2b2lkIHtcbiAgICAgICAgaWYgKCFzcGVjaWZpY2F0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTY3JhcGVyIHNwZWNpZmljYXRpb24gbXVzdCBiZSBzcGVjaWZpZWQ6IFwiICsgc3BlY2lmaWNhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzcGVjaWZpY2F0aW9uLmNvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTY3JhcGVyIHNwZWNpZmljYXRpb24gbXVzdCBoYXZlIGEgY29udGVudCB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3BlY2lmaWNhdGlvbi5zY3JhcGVyVHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2NyYXBlciBzcGVjaWZpY2F0aW9uIG11c3QgaGF2ZSBhbiBzY3JhcGVyIHR5cGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzcGVjaWZpY2F0aW9uLnNjcmFwZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNjcmFwZXIgc3BlY2lmaWNhdGlvbiBtdXN0IGhhdmUgYW4gc2NyYXBlciBleHByZXNzaW9uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gdmFsaWRhdGUgdGhhdCBhIGxpc3RlbmVyIHNwZWNpZmljYXRpb24gaXMgdmFsaWQsIGluY2x1ZGluZyBhbGxcbiAgICAgKiByZXF1aXJlZCB0b3AtbGV2ZWwgZmllbGRzIGFuZCBzY3JhcGVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfdmFsaWRhdGVMaXN0ZW5lclNwZWMoc3BlY2lmaWNhdGlvbjogSUxpc3RlbmVyU3BlY2lmaWNhdGlvbikge1xuICAgICAgICAvL0NoZWNrIGFsbCByZXF1aXJlZCBmaWVsZHMgaW4gaW50ZXJmYWNlIGRlZmluaXRpb24gZXhpc3QgYW5kIGFyZSB2YWxpZFxuICAgICAgICBpZiAoIXNwZWNpZmljYXRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3RlbmVyIHNwZWNpZmljYXRpb24gbXVzdCBiZSBzcGVjaWZpZWQ6IFwiICsgc3BlY2lmaWNhdGlvbik7XG4gICAgICAgIH0gXG4gICAgICAgIGlmICghc3BlY2lmaWNhdGlvbi5leHByZXNzaW9uVHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGlzdGVuZXIgc3BlY2lmaWNhdGlvbiBtdXN0IGNvbnRhaW4gdGhlIGV4cHJlc3Npb24gdHlwZTogXCIgKyBzcGVjaWZpY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvL01heSBiZSBlbXB0eSAtIGZvciBpbnN0YW5jZSwgaW4gdGhlIGNhc2Ugb2YgUGFnZUxvYWRlZCBhbmQgUGFnZUxvYWRpbmdcbiAgICAgICAgaWYgKHNwZWNpZmljYXRpb24uZXhwcmVzc2lvbiA9PT0gbnVsbCB8fCBzcGVjaWZpY2F0aW9uLmV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGlzdGVuZXIgc3BlY2lmaWNhdGlvbiBleHByZXNzaW9uIG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkOiBcIiArIHNwZWNpZmljYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3BlY2lmaWNhdGlvbi5ldmVudFR5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3RlbmVyIHNwZWNpZmljYXRpb24gbXVzdCBjb250YWluIGV2ZW50IHR5cGU6IFwiICsgc3BlY2lmaWNhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzcGVjaWZpY2F0aW9uLmxpc3RlbmVySWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3RlbmVyIHNwZWNpZmljYXRpb24gbXVzdCBjb250YWluIGEgbGlzdGVuZXIgSUQ6IFwiICsgc3BlY2lmaWNhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzcGVjaWZpY2F0aW9uLnNjcmFwZXJzIHx8IHNwZWNpZmljYXRpb24uc2NyYXBlcnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGlzdGVuZXIgc3BlY2lmaWNhdGlvbiBtdXN0IGNvbnRhaW4gYSBub24tZW1wdHkgc2NyYXBlcnMgYXJyYXk6IFwiICsgc3BlY2lmaWNhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzcGVjaWZpY2F0aW9uLmV4cHJlc3Npb25TcGVjaWZpY2F0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMaXN0ZW5lciBzcGVjaWZpY2F0aW9uIG11c3QgY29udGFpbiBhbiBleHByZXNzaW9uIHNwZWNpZmljYXRpb246IFwiICsgc3BlY2lmaWNhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvL0NoZWNrIHRoYXQgYWxsIHNjcmFwZXJzIHdpdGhpbiB0aGUgbGlzdGVuZXIgc2F0aXNmeSByZXF1aXJlZCBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBzY3JhcGVyU2lnbmF0dXJlc01hcCA9IHt9XG4gICAgICAgIHNwZWNpZmljYXRpb24uc2NyYXBlcnMuZm9yRWFjaCgoc2NyYXBlcjogSVNjcmFwZXJTcGVjaWZpY2F0aW9uKSA9PnsgXG4gICAgICAgICAgICBfdmFsaWRhdGVTY3JhcGVyKHNjcmFwZXIpO1xuICAgICAgICAgICAgLy9DaGVjayBsaXN0ZW5lci1zcGVjaWZpYyByZXF1aXJlbWVudHNcbiAgICAgICAgICAgIGlmICghc2NyYXBlci5zY3JhcGVyU2lnbmF0dXJlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2NyYXBlciBzaWduYXR1cmVzIG11c3QgYmUgcGFzc2VkIGFzIHBhcnQgb2YgdGhlIExpc3RlbmVycyBBUEk6IFwiICsgc2NyYXBlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NyYXBlclNpZ25hdHVyZXNNYXBbc2NyYXBlci5zY3JhcGVyU2lnbmF0dXJlXSl7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hvdWxkIG5vdCBoYXZlIGR1cGxpY2F0ZSBzY3JhcGVyIHNpZ25hdHVyZXMgaW4gYSBsaXN0ZW5lcidzIHNjcmFwZXIgc2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2NyYXBlclNpZ25hdHVyZXNNYXBbc2NyYXBlci5zY3JhcGVyU2lnbmF0dXJlXSA9IHNjcmFwZXIuc2NyYXBlclNpZ25hdHVyZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyogSGVscGVyIHRvIHZhbGlkYXRlIHRoYXQgYSB0YXJnZXRlZCBzZWFyY2ggZXhwcmVzc2lvbiBtZWV0cyBhbGwgcmVxdWlyZW1lbnRzIG9mIGl0cyBzcGVjaWZpY2F0aW9uLiAqL1xuICAgIGZ1bmN0aW9uIF92YWxpZGF0ZVRhcmdldGVkU2VhcmNoRXhwcmVzc2lvbihleHByZXNzaW9uU3BlY2lmaWNhdGlvbjogSVRhcmdldGVkU2VhcmNoRXhwcmVzc2lvbikge1xuICAgICAgICBpZiAoIWV4cHJlc3Npb25TcGVjaWZpY2F0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYXJnZXRlZCBzZWFyY2ggbGlzdGVuZXIgbXVzdCBoYXZlIGEgbGlzdGVuZXIgZXhwcmVzc2lvbjogXCIgKyBleHByZXNzaW9uU3BlY2lmaWNhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFleHByZXNzaW9uU3BlY2lmaWNhdGlvbi50YXJnZXRFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYXJnZXRlZCBzZWFyY2ggbGlzdGVuZXIgbXVzdCBoYXZlIGEgbGlzdGVuZXIgZXhwcmVzc2lvbiB3aXRoIHRhcmdldCBleHByZXNzaW9uOiBcIiArIGV4cHJlc3Npb25TcGVjaWZpY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV4cHJlc3Npb25TcGVjaWZpY2F0aW9uLnRhcmdldEV4cHJlc3Npb25UeXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYXJnZXRlZCBzZWFyY2ggbGlzdGVuZXIgbXVzdCBoYXZlIGEgdGFyZ2V0IGV4cHJlc3Npb24gdHlwZTogXCIgKyBleHByZXNzaW9uU3BlY2lmaWNhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFleHByZXNzaW9uU3BlY2lmaWNhdGlvbi5zZWFyY2hEZXB0aCB8fCBleHByZXNzaW9uU3BlY2lmaWNhdGlvbi5zZWFyY2hEZXB0aCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRhcmdldGVkIHNlYXJjaCBsaXN0ZW5lciBtdXN0IGhhdmUgYSBub24tbmVnYXRpdmUgc2VhcmNoIGRlcHRoOiBcIiArIGV4cHJlc3Npb25TcGVjaWZpY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV4cHJlc3Npb25TcGVjaWZpY2F0aW9uLnNlYXJjaEFsZ29yaXRobSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGFyZ2V0ZWQgc2VhcmNoIGxpc3RlbmVyIG11c3QgaGF2ZSBhIHNlYXJjaCBhbGdvcml0aG06IFwiICsgZXhwcmVzc2lvblNwZWNpZmljYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXhwcmVzc2lvblNwZWNpZmljYXRpb24ubWF4RWxlbWVudHMgfHwgZXhwcmVzc2lvblNwZWNpZmljYXRpb24ubWF4RWxlbWVudHMgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYXJnZXRlZCBzZWFyY2ggbGlzdGVuZXIgbXVzdCBoYXZlIGEgbm9uLW5lZ2F0aXZlIG1heCBlbGVtZW50IGNvdW50OiBcIiArIGV4cHJlc3Npb25TcGVjaWZpY2F0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qIEhlbHBlciB0byBjaGVjayBpZiBhbiBvYmplY3QgaXMgZW1wdHkgKi9cbiAgICBmdW5jdGlvbiBfaXNFbXB0eU9iamVjdChvYmo6IGFueSk6Ym9vbGVhbiB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMCAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdFxuICAgIH1cblxuICAgIC8qIEhlbHBlciB0byByZXRyaWV2ZSB0aGUgdmFsdWUgb2YgYSBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSBzb3VyY2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50LiBJZiBcbiAgICAgICBub25lIHdhcyBzcGVjaWZpZWQsIHRoaXMgbWV0aG9kIGRlZmF1bHRzIHRvIHVzaW5nIGl0cyB0ZXh0IGNvbnRlbnQuICovXG4gICAgZnVuY3Rpb24gX2dldEF0dHJpYnV0ZVNvdXJjZShhdHRyaWJ1dGVTb3VyY2U6IHN0cmluZywgZWxlbWVudDogSFRNTEVsZW1lbnQpOiBzdHJpbmcge1xuICAgICAgICB2YXIgYXR0cmlidXRlVmFsdWU6IHN0cmluZztcbiAgICAgICAgaWYgKGF0dHJpYnV0ZVNvdXJjZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlVmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVTb3VyY2UpO1xuICAgICAgICAgICAgLy9JZiBub3QgYXZhaWxhYmxlIHZpYSBnZXRBdHRyaWJ1dGUsIHJldHVybiB0aGUgYXR0cmlidXRlIHRocm91Z2ggZGlyZWN0IG9iamVjdCBhY2Nlc3MuXG4gICAgICAgICAgICByZXR1cm4gKGF0dHJpYnV0ZVZhbHVlID8gYXR0cmlidXRlVmFsdWUgOiBlbGVtZW50W2F0dHJpYnV0ZVNvdXJjZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmludGVyZmFjZSBEb2N1bWVudCB7XG4gICAgLy8gUmV0dXJucyBhbiBYUGF0aFJlc3VsdCBiYXNlZCBvbiBhbiBYUGF0aCBleHByZXNzaW9uIGFuZCBvdGhlciBnaXZlbiBwYXJhbWV0ZXJzXG4gICAgLy8gUmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvZG9jdW1lbnQuZXZhbHVhdGVcbiAgICBldmFsdWF0ZSh4cGF0aEV4cHJlc3Npb24sXG4gICAgICAgIGNvbnRleHROb2RlLFxuICAgICAgICBuYW1lc3BhY2VSZXNvbHZlcixcbiAgICAgICAgcmVzdWx0VHlwZSxcbiAgICAgICAgcmVzdWx0KTpYUGF0aFJlc3VsdDtcbiAgICBxdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yOiBzdHJpbmcpOiBOb2RlTGlzdDtcbiAgICByZWFkb25seSBVUkw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFhQYXRoUmVzdWx0IHtcbiAgICByZWFkb25seSBib29sZWFuVmFsdWU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaW52YWxpZEl0ZXJhdG9yU3RhdGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbnVtYmVyVmFsdWU6IG51bWJlcjtcbiAgICByZWFkb25seSByZXN1bHRUeXBlOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgc2luZ2xlTm9kZVZhbHVlOiBOb2RlO1xuICAgIHJlYWRvbmx5IHNuYXBzaG90TGVuZ3RoOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgc3RyaW5nVmFsdWU6IHN0cmluZztcbiAgICBpdGVyYXRlTmV4dCgpOiBOb2RlO1xuICAgIHNuYXBzaG90SXRlbShpbmRleDpudW1iZXIpOk5vZGU7XG59XG4iXX0=